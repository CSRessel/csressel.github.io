"use strict";(self.webpackChunkpersonalpage=self.webpackChunkpersonalpage||[]).push([[1960],{2616:e=>{e.exports=JSON.parse('{"permalink":"/blog/eink-tablet-part1","source":"@site/blog/2025-08-12-eink-tablet-part1.md","title":"E Ink tablets: Rooting a Boox Go 10.3","description":"Motivation","date":"2025-08-12T00:00:00.000Z","tags":[],"readingTime":15.09,"hasTruncateMarker":true,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.webp","key":"csressel","page":null}],"frontMatter":{"slug":"eink-tablet-part1","title":"E Ink tablets: Rooting a Boox Go 10.3","authors":"csressel"},"unlisted":false,"prevItem":{"title":"\\"Agent\\" is a Terribly Non-Specific Term","permalink":"/blog/agent-is-not-specific"},"nextItem":{"title":"Rock paper scissors consequentialism","permalink":"/blog/rps-consequentialism"}}')},4250:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var s=n(2616),i=n(4848),a=n(8453);const o={slug:"eink-tablet-part1",title:"E Ink tablets: Rooting a Boox Go 10.3",authors:"csressel"},r=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Motivation",id:"motivation",level:2},{value:"Project Goals",id:"project-goals",level:2},{value:"Rooting the Device",id:"rooting-the-device",level:2},{value:"System Modifications",id:"system-modifications",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(t.p,{children:"I haven't worked on a lower-level systems project in a while, I haven't worked on reversing or binaries since a brief stint in college, I've never worked on anything in the Android software ecosystem, and I haven't yet written or modified Linux device drivers myself."}),"\n",(0,i.jsx)(t.p,{children:"Directly in line with those goals is an unmet hardware need: my growing desire for an E Ink tablet that will run an open source Android build.\nI've heard that some users have gotten LineageOS running on a Hisense, which is in the neighborhood of what I would be interested in.\nHowever, my note taking preferences require the screen real estate of a tablet.\nFor several months, I've used a Boox Go 10.3 as an untrusted device solely for epub reading.\nAs time has gone on, this tablet's full Play Store access on an Android build hints at tantalizing possibilities: the congruous feeling of a paper-like calendar or planner, an E Ink optimized RSS reader, note taking and email on the go, all further enabled by my obsession with small form factor wireless keyboards.\nWith that dream in mind, this is the perfect fit to learn a bit about AOSP and device drivers."}),"\n",(0,i.jsx)(t.h2,{id:"project-goals",children:"Project Goals"}),"\n",(0,i.jsx)(t.p,{children:"With my lay understanding of the hardware/software boundary in the mobile ecosystem, long term I would be curious how far I can get towards deploying an Android custom ROM to the Boox Go 10.3.\nThis unfortunately entails the very tough challenge of a full device bringup.\nBoox has made this even tougher by not open sourcing either their kernel or the device tree.\nFor this to be minimally usable, it would require support for:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Display driver (Carta 1200 10.3 inch)"}),"\n",(0,i.jsx)(t.li,{children:"Capacitive touch controller"}),"\n",(0,i.jsx)(t.li,{children:"Wireless chipset driver (wifi + bt)"}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"And nice-to-have's include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Wacom EMR driver"}),"\n",(0,i.jsx)(t.li,{children:"any quality of life improvements on the screen refresh or tearing"}),"\n",(0,i.jsx)(t.li,{children:"E Ink friendly UI elements (lock screen, menus, launcher)"}),"\n",(0,i.jsx)(t.li,{children:"emulate some of the Onyx per-app optimizations (refresh modes, dark color enhancement, light color filter, etc)."}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["I know I'll have to further define or correct that mile high overview as I go. It might even be possible that I need to re-target my work on a different hardware platform! (Whether that's a different Boox model, a reMarkable for the ",(0,i.jsx)(t.a,{href:"https://developer.remarkable.com/documentation/software-stack",children:"better DX"}),", or the HiSense.)\nFurther resources:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["LineageOS's engineering series:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://lineageos.org/engineering/Qualcomm-Firmware/",children:"https://lineageos.org/engineering/Qualcomm-Firmware/"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://lineageos.org/engineering/HowTo-SELinux/",children:"https://lineageos.org/engineering/HowTo-SELinux/"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://lineageos.org/engineering/HowTo-Debugging/",children:"https://lineageos.org/engineering/HowTo-Debugging/"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Some existing tools:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/bkerler/edl",children:"https://github.com/bkerler/edl"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/ssut/payload-dumper-go",children:"https://github.com/ssut/payload-dumper-go"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/Hagb/decryptBooxUpdateUpx",children:"https://github.com/Hagb/decryptBooxUpdateUpx"})}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://github.com/onyx-intl",children:"https://github.com/onyx-intl"})," (limited and out of date, it looks like)"]}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://wiki.postmarketos.org/wiki/ONYX_BOOX_Go_6_(onyx-go6)",children:"https://wiki.postmarketos.org/wiki/ONYX_BOOX_Go_6_(onyx-go6)"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["and I know later on in this side project, I'll have to get real comfortable on ",(0,i.jsx)(t.a,{href:"https://xdaforums.com",children:"XDA forums"})]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"rooting-the-device",children:"Rooting the Device"}),"\n",(0,i.jsxs)(t.p,{children:["My first task is to root the device (generally following ",(0,i.jsx)(t.a,{href:"https://blog.tho.ms/hacks/2021/03/27/hacking-onyx-boox-note-air.html",children:"existing"})," ",(0,i.jsx)(t.a,{href:"https://cake.moe/blog/rooting-boox-tab-ultra/",children:"works"}),", by Thomas Hollstegge and Mia respectively, working on different Boox devices).\nThis will provide far greater access on the device, as well as images of the current system partitions."]}),"\n",(0,i.jsxs)(t.p,{children:["Onyx firmware is no longer listed online, so I needed to get the new update off my device itself.\nMy current build was ",(0,i.jsx)(t.code,{children:"2024-10-24_10-59_3.5.4_2b800b967"}),", so I was able to re-open the Onyx Launcher I hadn't used in some time, and download the pending firmware update.\nI transferred the build of ",(0,i.jsx)(t.code,{children:"2025-06-18_14-27_4.0.2-rel_0614_35a32af51"})," to my workstation, and I was able to decrypt the firmware using the ",(0,i.jsx)(t.a,{href:"https://github.com/Hagb/decryptBooxUpdateUpx",children:"Hagb/decryptBooxUpdateUpx"})," repo:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"python3 DeBooxUpx.py Go103 update.upx\n"})}),"\n",(0,i.jsx)(t.p,{children:"The resulting directory is:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"update.zip\n\n\ud83d\udcc2 META-INF\n  \ud83d\udcc2  com\n    \ud83d\udcc2  android\n      \ud83d\udcc4 metadata\n      \ud83d\udcc4 metadata.pb\n      \ud83d\udcc4 otacert\n\ud83d\udcc4 apex_info.pb\n\ud83d\udcc4 care_map.pb\n\ud83d\udcc4 payload.bin\n\ud83d\udcc4 payload_properties.txt\n"})}),"\n",(0,i.jsxs)(t.admonition,{type:"info",children:[(0,i.jsx)(t.p,{children:"\ud83e\udd16 Gemini 2.5 Pro says:"}),(0,i.jsx)(t.p,{children:"Root Directory Files"}),(0,i.jsx)(t.p,{children:"These files are central to defining and applying the update."}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"apex_info.pb: This protocol buffer file contains information about any APEX (Android Pony EXpress) files within the update. APEX is a container format used to deliver updatable, lower-level system modules. This file specifies the list of APEX files included in the payload."}),"\n",(0,i.jsx)(t.li,{children:"care_map.pb: This file is primarily associated with A/B (seamless) system updates. It contains information that helps the update engine determine how to apply the update to the inactive partition slot while the user's system continues to run on the active slot. It can also detail which partitions can be wiped or if a data wipe is required."}),"\n",(0,i.jsx)(t.li,{children:"payload.bin: This is the core of the update package. It's a binary file that contains the compressed images of the various system partitions to be updated, such as system, vendor, and boot. For A/B updates, this payload is streamed to the inactive partition and applied."}),"\n",(0,i.jsx)(t.li,{children:"payload_properties.txt: This text file contains properties and metadata about the payload.bin file. It includes information such as the payload's size, hash, and header details. This allows the system to verify the integrity of the payload before and during the update process."}),"\n"]})]}),"\n",(0,i.jsxs)(t.p,{children:["The payload can be split out into separate partition images using a tool like ",(0,i.jsx)(t.a,{href:"https://github.com/ssut/payload-dumper-go?tab=readme-ov-file",children:"ssut/payload-dumper-go"}),", or using the open source EDL implementation to dump the existing partitions. Since we already have the payload, we can for now skip the headache with EDL (where we have to find an applicable loader file for this SoC). We run:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"./payload-dumper-go payload.bin\n\nls -lh\ntotal 3.8G\n-rwxr-xr-x 1 clifford clifford 156K Jul  9 10:06 abl.img\n-rwxr-xr-x 1 clifford clifford  96M Jul  9 10:06 boot.img\n-rwxr-xr-x 1 clifford clifford 8.0M Jul  9 10:06 dtbo.img\n-rwxr-xr-x 1 clifford clifford  35M Jul  9 10:06 modem.img\n-rwxr-xr-x 1 clifford clifford 592M Jul  9 10:06 product.img\n-rwxr-xr-x 1 clifford clifford  96M Jul  9 10:06 recovery.img\n-rwxr-xr-x 1 clifford clifford 2.2G Jul  9 10:07 system.img\n-rwxr-xr-x 1 clifford clifford 361M Jul  9 10:06 system_ext.img\n-rwxr-xr-x 1 clifford clifford 8.0K Jul  9 10:06 vbmeta.img\n-rwxr-xr-x 1 clifford clifford 4.0K Jul  9 10:06 vbmeta_system.img\n-rwxr-xr-x 1 clifford clifford 480M Jul  9 10:06 vendor.img\n-rwxr-xr-x 1 clifford clifford 3.1M Jul  9 10:06 xbl.img\n"})}),"\n",(0,i.jsxs)(t.p,{children:["So let's patch the boot image to prep for install of Magisk, apply the update in Onyx, and finally flash the new boot image.\nMagisk easily patches the image to produce ",(0,i.jsx)(t.code,{children:"magisk_patched-29000_F55YV.img"}),", but that's where the struggles begin.\nWithin fastboot, both ",(0,i.jsx)(t.code,{children:"boot"})," and ",(0,i.jsx)(t.code,{children:"flash"})," send the image to the device, but then finally return command not found."]}),"\n",(0,i.jsx)(t.p,{children:"Big set back here, I was hoping not to faff around with EDL and loaders and similar to start.\nHowever, with those commands disabled there isn't another way to flash the boot image.\nTime to setup EDL properly!\nThe EDL repo does some global system installation that I wasn't eager about; the udev rules make sense, but the system python dep installation isn't my favorite.\nI got the EDL repo working after some trial and error:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"sudo bash install-linux-edl-drivers.sh  # Required changes\nuv venv -p 3.13                         # Setup an isolated environment\nuv pip install -e .                     # Install the project deps in devmode\nsource .venv/bin/activate\n./edl  --help                           # Test that the command works\n"})}),"\n",(0,i.jsxs)(t.p,{children:["I had some issues with getting ",(0,i.jsx)(t.code,{children:"edl printgpt"})," to work, as there's no loader for SM6225 in the provided submodule, and while testing out various loaders suggested online my device became unresponsive to all EDL commands.\nAfter holding down the power button for long periods until the device rebooted out of recovery mode, I was able to reboot to EDL again and ",(0,i.jsx)(t.a,{href:"https://github.com/bkerler/Loaders/issues/97",children:"one of the loaders I had tried earlier"})," (formerly with no luck) was now working!"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"edl --loader sm6225.bin printgpt\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(t.p,{children:"Example Partition Output"})}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-plaintext",children:'Qualcomm Sahara / Firehose Client V3.62 (c) B.Kerler 2018-2025.\nmain - Using loader sm6225.bin ...\nmain - Waiting for the device\nmain - Device detected :)\nsahara - Protocol version: 2, Version supported: 1\nmain - Mode detected: sahara\nsahara -\nVersion 0x2\n------------------------\nHWID:              0x################ (MSM_ID:0x########,OEM_ID:0x0000,MODEL_ID:0x0000)\nCPU detected:      "divar"\nPK_HASH:           0x################################################################################################\nSerial:            0x########\n\nsahara - Protocol version: 2, Version supported: 1\nsahara - Uploading loader sm6225.bin ...\nsahara - 64-Bit mode detected.\nsahara - Firehose mode detected, uploading...\nsahara - Loader successfully uploaded.\nmain - Trying to connect to firehose loader ...\nfirehose - INFO: Binary build date: Jan 10 2024 @ 18:16:46\nfirehose - INFO: Binary build date: Jan 10 2024 @ 18:16:46\nfirehose - INFO: Chip serial num: ######### (0x########)\nfirehose - INFO: Supported Functions (15):\nfirehose - INFO: program\nfirehose - INFO: read\nfirehose - INFO: nop\nfirehose - INFO: patch\nfirehose - INFO: configure\nfirehose - INFO: setbootablestoragedrive\nfirehose - INFO: erase\nfirehose - INFO: power\nfirehose - INFO: firmwarewrite\nfirehose - INFO: getstorageinfo\nfirehose - INFO: benchmark\nfirehose - INFO: emmc\nfirehose - INFO: ufs\nfirehose - INFO: fixgpt\nfirehose - INFO: getsha256digest\nfirehose - INFO: End of supported functions 15\nfirehose_client\nfirehose_client - [LIB]: No --memory option set, we assume "UFS" as default ..., if it fails, try using "--memory" with "UFS","NAND" or "spinor" instead !\nfirehose\nfirehose - [LIB]: Couldn\'t detect MaxPayloadSizeFromTargetinBytes\nfirehose\nfirehose - [LIB]: Couldn\'t detect TargetName\nfirehose - TargetName=Unknown\nfirehose - MemoryName=UFS\nfirehose - Version=1\nfirehose - Trying to read first storage sector...\nfirehose - Running configure...\nfirehose - Storage report:\nfirehose - total_blocks:14507008\nfirehose - block_size:4096\nfirehose - page_size:4096\nfirehose - num_physical:6\nfirehose - manufacturer_id:2597\nfirehose - serial_num:##########\nfirehose - fw_version:1.7\nfirehose - mem_type:UFS\nfirehose - prod_name:eUFS2.2_064\nfirehose_client - Supported functions:\n-----------------\nprogram,read,nop,patch,configure,setbootablestoragedrive,erase,power,firmwarewrite,getstorageinfo,benchmark,emmc,ufs,fixgpt,getsha256digest\n\nParsing Lun 0:\n\nGPT Table:\n-------------\nssd:                 Offset 0x0000000000006000, Length 0x0000000000002000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\npersist:             Offset 0x0000000000008000, Length 0x0000000002000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nmisc:                Offset 0x0000000002008000, Length 0x0000000000100000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nkeystore:            Offset 0x0000000002108000, Length 0x0000000000080000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nfrp:                 Offset 0x0000000002188000, Length 0x0000000000080000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nsuper:               Offset 0x0000000002208000, Length 0x0000000100000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nrecovery_a:          Offset 0x0000000102208000, Length 0x0000000006000000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nrecovery_b:          Offset 0x0000000108208000, Length 0x0000000006000000, Flags 0x1004000000000000, UUID ####################################, Type ##########, Active True\nvbmeta_system_a:     Offset 0x000000010e208000, Length 0x0000000000010000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nvbmeta_system_b:     Offset 0x000000010e218000, Length 0x0000000000010000, Flags 0x1004000000000000, UUID ####################################, Type ##########, Active True\nmetadata:            Offset 0x000000010e228000, Length 0x0000000001000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nonyxconfig:          Offset 0x000000010f228000, Length 0x0000000001800000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nuserdata:            Offset 0x0000000110a28000, Length 0x0000000cc51d3000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\n\nTotal disk size:0x0000000dd5c00000, sectors:0x0000000000dd5c00\n\n\nParsing Lun 1:\n\nGPT Table:\n-------------\nxbl_a:               Offset 0x0000000000006000, Length 0x0000000000380000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nxbl_config_a:        Offset 0x0000000000386000, Length 0x0000000000020000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False\n\nTotal disk size:0x0000000000800000, sectors:0x0000000000000800\n\n\nParsing Lun 2:\n\nGPT Table:\n-------------\nxbl_b:               Offset 0x0000000000006000, Length 0x0000000000380000, Flags 0x10c4000000000000, UUID ####################################, Type ##########, Active True\nxbl_config_b:        Offset 0x0000000000386000, Length 0x0000000000020000, Flags 0x00c4000000000000, UUID ####################################, Type ##########, Active True\n\nTotal disk size:0x0000000000800000, sectors:0x0000000000000800\n\n\nParsing Lun 3:\n\nGPT Table:\n-------------\nALIGN_TO_128K_1:     Offset 0x0000000000006000, Length 0x000000000001a000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\ncdt:                 Offset 0x0000000000020000, Length 0x0000000000020000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nddr:                 Offset 0x0000000000040000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\n\nTotal disk size:0x0000000008000000, sectors:0x0000000000008000\n\n\nParsing Lun 4:\n\nGPT Table:\n-------------\nrpm_a:               Offset 0x0000000000006000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\ntz_a:                Offset 0x0000000000086000, Length 0x0000000000400000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nhyp_a:               Offset 0x0000000000486000, Length 0x0000000000080000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False\nmodem_a:             Offset 0x0000000000506000, Length 0x000000000b400000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nbluetooth_a:         Offset 0x000000000b906000, Length 0x0000000000100000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nmdtpsecapp_a:        Offset 0x000000000ba06000, Length 0x0000000000400000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nmdtp_a:              Offset 0x000000000be06000, Length 0x0000000002000000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nabl_a:               Offset 0x000000000de06000, Length 0x0000000000100000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\ndsp_a:               Offset 0x000000000df06000, Length 0x0000000002000000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nkeymaster_a:         Offset 0x000000000ff06000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nboot_a:              Offset 0x000000000ff86000, Length 0x0000000006000000, Flags 0x0073000000000000, UUID ####################################, Type ##########, Active False\ncmnlib_a:            Offset 0x0000000015f86000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\ncmnlib64_a:          Offset 0x0000000016006000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\ndevcfg_a:            Offset 0x0000000016086000, Length 0x0000000000020000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False\nqupfw_a:             Offset 0x00000000160a6000, Length 0x0000000000010000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False\nvbmeta_a:            Offset 0x00000000160b6000, Length 0x0000000000010000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\ndtbo_a:              Offset 0x00000000160c6000, Length 0x0000000001800000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False\nimagefv_a:           Offset 0x00000000178c6000, Length 0x0000000000200000, Flags 0x0040000000000001, UUID ####################################, Type ##########, Active False\nuefisecapp_a:        Offset 0x0000000017ac6000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nfeatenabler_a:       Offset 0x0000000017cc6000, Length 0x0000000000020000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nmultiimgoem_a:       Offset 0x0000000017ce6000, Length 0x0000000000008000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False\nrpm_b:               Offset 0x0000000017cee000, Length 0x0000000000080000, Flags 0x007f000000000000, UUID ####################################, Type #########, Active True\ntz_b:                Offset 0x0000000017d6e000, Length 0x0000000000400000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True\nhyp_b:               Offset 0x000000001816e000, Length 0x0000000000080000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True\nmodem_b:             Offset 0x00000000181ee000, Length 0x000000000b400000, Flags 0x107f000000000000, UUID ####################################, Type ##############, Active True\nbluetooth_b:         Offset 0x00000000235ee000, Length 0x0000000000100000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\nmdtpsecapp_b:        Offset 0x00000000236ee000, Length 0x0000000000400000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\nmdtp_b:              Offset 0x0000000023aee000, Length 0x0000000002000000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\nabl_b:               Offset 0x0000000025aee000, Length 0x0000000000100000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\ndsp_b:               Offset 0x0000000025bee000, Length 0x0000000002000000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\nkeymaster_b:         Offset 0x0000000027bee000, Length 0x0000000000080000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\nboot_b:              Offset 0x0000000027c6e000, Length 0x0000000006000000, Flags 0x0077000000000000, UUID ####################################, Type ##########, Active True\ncmnlib_b:            Offset 0x000000002dc6e000, Length 0x0000000000080000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\ncmnlib64_b:          Offset 0x000000002dcee000, Length 0x0000000000080000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\ndevcfg_b:            Offset 0x000000002dd6e000, Length 0x0000000000020000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True\nqupfw_b:             Offset 0x000000002dd8e000, Length 0x0000000000010000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True\nvbmeta_b:            Offset 0x000000002dd9e000, Length 0x0000000000010000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\ndtbo_b:              Offset 0x000000002ddae000, Length 0x0000000001800000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True\nfeatenabler_b:       Offset 0x000000002f5ae000, Length 0x0000000000020000, Flags 0x0004000000000000, UUID ####################################, Type ##########, Active True\nimagefv_b:           Offset 0x000000002f5ce000, Length 0x0000000000200000, Flags 0x007f000000000001, UUID ####################################, Type ##########, Active True\nuefisecapp_b:        Offset 0x000000002f7ce000, Length 0x0000000000200000, Flags 0x0004000000000000, UUID ####################################, Type ##########, Active True\nmultiimgoem_b:       Offset 0x000000002f9ce000, Length 0x0000000000008000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True\ndevinfo:             Offset 0x000000002f9d6000, Length 0x0000000000001000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\ndip:                 Offset 0x000000002f9d7000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\napdp:                Offset 0x000000002fad7000, Length 0x0000000000040000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nspunvm:              Offset 0x000000002fb17000, Length 0x0000000000800000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nsplash:              Offset 0x0000000030317000, Length 0x00000000020a4000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nlimits:              Offset 0x00000000323bb000, Length 0x0000000000001000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\ntoolsfv:             Offset 0x00000000323bc000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nlogfs:               Offset 0x00000000324bc000, Length 0x0000000000800000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\ncateloader:          Offset 0x0000000032cbc000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nrawdump:             Offset 0x0000000032ebc000, Length 0x0000000008000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nlogdump:             Offset 0x000000003aebc000, Length 0x0000000004000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nstorsec:             Offset 0x000000003eebc000, Length 0x0000000000020000, Flags 0x1000000000000000, UUID ####################################, Type #########, Active False\nmultiimgqti:         Offset 0x000000003eedc000, Length 0x0000000000008000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nuefivarstore:        Offset 0x000000003eee4000, Length 0x0000000000080000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nsecdata:             Offset 0x000000003ef64000, Length 0x0000000000007000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\ncatefv:              Offset 0x000000003ef6b000, Length 0x0000000000080000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\ncatecontentfv:       Offset 0x000000003efeb000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\n\nTotal disk size:0x0000000100000000, sectors:0x0000000000100000\n\n\nParsing Lun 5:\n\nGPT Table:\n-------------\nALIGN_TO_128K_2:     Offset 0x0000000000006000, Length 0x000000000001a000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nmodemst1:            Offset 0x0000000000020000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\nmodemst2:            Offset 0x0000000000220000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type #########, Active False\nfsg:                 Offset 0x0000000000420000, Length 0x0000000000200000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False\nfsc:                 Offset 0x0000000000620000, Length 0x0000000000020000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False\n\nTotal disk size:0x0000000008000000, sectors:0x0000000000008000\n'})})]}),"\n",(0,i.jsx)(t.p,{children:"From here, we just read out all the requisite images for us to patch:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"mkdir extracted_edl_20250809\ncd extracted_edl_20250809\nedl --loader sm6225.bin r boot_a,boot_b,vbmeta_a,vbmeta_b boot_a.img,boot_b.img,vbmeta_a.img,vbmeta_b.img\nedl reset\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Then after the device as rebooted, we can copy ",(0,i.jsx)(t.code,{children:"boot_a.img"})," and ",(0,i.jsx)(t.code,{children:"boot_b.img"})," into the device, disconnect from the computer, and follow the Magisk patching instructions."]}),"\n",(0,i.jsxs)(t.admonition,{type:"warning",children:[(0,i.jsx)(t.p,{children:"From here it's important to NOT confuse the two partitions in the output files!"}),(0,i.jsxs)(t.p,{children:["I renamed each Magisk patched output as it was produced, to prefix the partition: ",(0,i.jsx)(t.code,{children:"boot_a_magisk_patched-29000_IsHAi.img"})," and ",(0,i.jsx)(t.code,{children:"boot_b_magisk_patched-29000_2zita.img"})]})]}),"\n",(0,i.jsxs)(t.p,{children:["Finally, in order to use the patched boot images, we can set relevant flags in the VBMeta (verified boot metadata) images by ",(0,i.jsx)(t.a,{href:"https://github.com/zoomver/Vbmeta",children:"using this script"})," to modify them in place:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"python patch-vbmeta.py vbmeta_a.img\npython patch-vbmeta.py vbmeta_b.img\n"})}),"\n",(0,i.jsx)(t.p,{children:"Finally, we need to flash these all back to the device, so back to EDL mode we go!"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"adb reboot edl\nedl --loader sm6225.bin w boot_a extracted_edl_20250809/boot_a_magisk_patched-29000_IsHAi.img\nedl --loader sm6225.bin w boot_b extracted_edl_20250809/boot_b_magisk_patched-29000_2zita.img\nedl --loader sm6225.bin w vbmeta_a extracted_edl_20250809/vbmeta_a.img\nedl --loader sm6225.bin w vbmeta_b extracted_edl_20250809/vbmeta_b.img\nedl reset\n"})}),"\n",(0,i.jsx)(t.p,{children:"And upon reboot, Magisk confirms the rooted image was booted successfully."}),"\n",(0,i.jsx)(t.p,{children:"Additional resources used:"}),"\n",(0,i.jsx)(t.h2,{id:"system-modifications",children:"System Modifications"}),"\n",(0,i.jsx)(t.p,{children:"At this point, to make the device a bit more trusted I worked through the following steps:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Add a Magisk DenyList, blocking almost all apps for su access"}),"\n",(0,i.jsx)(t.li,{children:"AFWall+, blocking all Onyx apps from network traffic"}),"\n",(0,i.jsxs)(t.li,{children:["Disable Onyx apps via ",(0,i.jsx)(t.code,{children:"adb shell pm clear $PKG_NAME && adb shell pm disable-user $PKG_NAME"})]}),"\n",(0,i.jsx)(t.li,{children:"Neo Backup for all apps"}),"\n",(0,i.jsxs)(t.li,{children:["Remove Onyx apps via ",(0,i.jsx)(t.code,{children:"adb shell pm uninstall --user 0 $PKG_NAME"})]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"And for reference, at the time of writing it appears that the tablet ships with the following Boox-modified apps:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"com.android.quicksearchbox"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"org.chromium.chrome"})}),"\n",(0,i.jsx)(t.li,{children:'every "onyx" app'}),"\n"]}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)(t.p,{children:(0,i.jsx)(t.code,{children:"adb shell pm list packages | grep onyx"})})}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"package:com.android.internal.systemui.navbar.gestural_onyx\npackage:com.onyx.dict\npackage:com.onyx.kime\npackage:com.onyx.mail\npackage:com.onyx.android.onyxotaservice\npackage:com.onyx.clock\npackage:com.onyx.igetshop\npackage:com.onyx.android.production.test\npackage:com.onyx.latinime\npackage:com.onyx.musicplayer\npackage:com.onyx.android.ksync\npackage:com.onyx\npackage:com.onyx.easytransfer\npackage:com.onyx.kreader\npackage:com.onyx.android.note\npackage:com.onyx.gallery\npackage:com.onyx.floatingbutton\npackage:com.onyx.tscalibration\npackage:com.onyx.aiassistant\npackage:com.onyx.voicerecorder\npackage:com.onyx.appmarket\npackage:com.onyx.calculator\n"})})]}),"\n",(0,i.jsx)(t.p,{children:"Of course there are several, deeper modifications made within the Boox ROM, given many of the UI elements that are still present (such as the overriden utility dropdown, the E Ink specific app configuration, and the lock screen).\nBut that's a good start, and opens up much deeper system access!"})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);