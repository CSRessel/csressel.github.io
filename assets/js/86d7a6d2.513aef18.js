"use strict";(self.webpackChunkpersonalpage=self.webpackChunkpersonalpage||[]).push([[9085],{741:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var s=t(5454),r=t(4848),a=t(8453);const o={slug:"python-generators-part2",title:"Learning generators part 2: In depth",authors:"csressel"},i=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Functions Internally Handling State",id:"functions-internally-handling-state",level:2}];function h(e){const n={a:"a",admonition:"admonition",h2:"h2",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"How generators can be used in four ways (from simple to complex):"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Lazy-like expressions, including unbounded sequences"}),"\n",(0,r.jsx)(n.li,{children:"Alternating control flow with the caller"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:'A "pure-looking" function, with hidden internal state'})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Internally managing a state-machine, that handles caller-passed input"})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["The first two use cases are covered ",(0,r.jsx)(n.a,{href:"/blog/python-generators-part1",children:"this previous article"}),", and serve as a primer to the topic.\nIf you don't have a solid understanding of generators in Python, I would recommend starting there."]}),"\n",(0,r.jsx)(n.p,{children:"The second two use cases are covered in this article."}),"\n",(0,r.jsxs)(n.admonition,{type:"info",children:[(0,r.jsx)(n.p,{children:"Well that's a big gap in time between these two articles!"}),(0,r.jsx)(n.p,{children:"A peak behind the screen -- I speed wrote the first article and outlined the\nsecond, immediately after doing some small projects and consuming some related\ntech talks. This past month I was able to clean up this section, and finally\nclick publish on both!"})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"functions-internally-handling-state",children:"Functions Internally Handling State"}),"\n",(0,r.jsxs)(n.p,{children:["Both the previous use cases are common ones, made more concise through generators.\nThis use case and the next are less common use cases that are less about convenience, and more becoming ",(0,r.jsx)(n.strong,{children:"possible"})," with generators.\n(Okay okay, that's not a challenge... There are definitely other ways to construct this logic! But I think these particular formations make me thankful for the tool.)"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5454:e=>{e.exports=JSON.parse('{"permalink":"/blog/python-generators-part2","source":"@site/blog/2025-07-11-generators-in-depth-part2.md","title":"Learning generators part 2: In depth","description":"How generators can be used in four ways (from simple to complex):","date":"2025-07-11T00:00:00.000Z","tags":[],"readingTime":11.4,"hasTruncateMarker":true,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.webp","key":"csressel","page":null}],"frontMatter":{"slug":"python-generators-part2","title":"Learning generators part 2: In depth","authors":"csressel"},"unlisted":false,"prevItem":{"title":"Rock paper scissors consequentialism","permalink":"/blog/rps-consequentialism"},"nextItem":{"title":"Learning generators part 1: Basics","permalink":"/blog/python-generators-part1"}}')}}]);